/*

        ██╗      █████╗      █████╗  ██████╗ █████╗ ██████╗ ███████╗███╗   ███╗██╗ █████╗     ██╗   ██╗██████╗ ██╗   ██╗███╗   ██╗████████╗██╗   ██╗
        ██║     ██╔══██╗    ██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝████╗ ████║██║██╔══██╗    ██║   ██║██╔══██╗██║   ██║████╗  ██║╚══██╔══╝██║   ██║
        ██║     ███████║    ███████║██║     ███████║██║  ██║█████╗  ██╔████╔██║██║███████║    ██║   ██║██████╔╝██║   ██║██╔██╗ ██║   ██║   ██║   ██║
        ██║     ██╔══██║    ██╔══██║██║     ██╔══██║██║  ██║██╔══╝  ██║╚██╔╝██║██║██╔══██║    ██║   ██║██╔══██╗██║   ██║██║╚██╗██║   ██║   ██║   ██║
        ███████╗██║  ██║    ██║  ██║╚██████╗██║  ██║██████╔╝███████╗██║ ╚═╝ ██║██║██║  ██║    ╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║   ██║   ╚██████╔╝
        ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝    ╚═════╝ 
   

versión 1.0.0-alfa3 


Creador: Mario Carrillo González


*/ 



limpiar()

# 1-Algunas variables globales del programa
eleMenu = tipo("Ubuntu" && 1) 
beta = tipo("Ubuntu" && 1)
x = tipo ("Ubuntu" && 1)



# 2-Pantalla de carga
escribir ("


        ██╗      █████╗      █████╗  ██████╗ █████╗ ██████╗ ███████╗███╗   ███╗██╗ █████╗     ██╗   ██╗██████╗ ██╗   ██╗███╗   ██╗████████╗██╗   ██╗
        ██║     ██╔══██╗    ██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝████╗ ████║██║██╔══██╗    ██║   ██║██╔══██╗██║   ██║████╗  ██║╚══██╔══╝██║   ██║
        ██║     ███████║    ███████║██║     ███████║██║  ██║█████╗  ██╔████╔██║██║███████║    ██║   ██║██████╔╝██║   ██║██╔██╗ ██║   ██║   ██║   ██║
        ██║     ██╔══██║    ██╔══██║██║     ██╔══██║██║  ██║██╔══╝  ██║╚██╔╝██║██║██╔══██║    ██║   ██║██╔══██╗██║   ██║██║╚██╗██║   ██║   ██║   ██║
        ███████╗██║  ██║    ██║  ██║╚██████╗██║  ██║██████╔╝███████╗██║ ╚═╝ ██║██║██║  ██║    ╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║   ██║   ╚██████╔╝
        ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝    ╚═════╝ 
 


                     .88888888:.                                                     ⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠋⠉⠁⠀⠀⠀⠀⠈⠉⠙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿
                    88888888.88888.                                                  ⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⣿⣿⣿⣿⣿
                  .8888888888888888.                                                 ⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣦⠀⠀⠀⠈⢻⣿⣿⣿ 
                  888888888888888888                                                 ⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⢠⣶⣶⣾⣷⣶⣆⠸⣿⣿⡟⠀⠀⠀⠀⠀⠹⣿⣿
                  88' _`88'_  `88888                                                 ⣿⠃⠀⠀⠀⠀⠀⠀⣠⣾⣷⡈⠻⠿⠟⠻⠿⢿⣷⣤⣤⣄⠀⠀⠀⠀⠀⠀⠘⣿
                  88 88 88 88  88888                                                 ⡏⠀⠀⠀⠀⠀⠀⣴⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⠀⠀⠀⠀⠀⠀⢹
                  88_88_::_88_:88888                                                 ⠁⠀⠀⢀⣤⣤⡘⢿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡇⠀⠀⠀⠀⠀⠈
                  88:::,::,:::::8888                                                 ⠀⠀⠀⣿⣿⣿⡇⢸⣿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣉⣉⡁⠀⠀⠀⠀⠀⠀
                  88`:::::::::'`8888                                                 ⡀⠀⠀⠈⠛⠛⢡⣾⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⡇⠀⠀⠀⠀⠀⢀
                 .88  `::::'    8:88.                                                ⣇⠀⠀⠀⠀⠀⠀⠻⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⠟⠀⠀⠀⠀⠀⠀⣸
                8888            `8:888.                                              ⣿⡄⠀⠀⠀⠀⠀⠀⠙⢿⡿⢁⣴⣶⣦⣴⣶⣾⡿⠛⠛⠋⠀⠀⠀⠀⠀⠀⢠⣿
             .8888'             `888888.                                             ⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⠿⢿⡿⠿⠏⢰⣿⣿⣧⠀⠀⠀⠀⠀⣰⣿⣿
            .8888:..  .::.  ...:'8888888:.                                           ⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⠟⠀⠀⠀⢀⣼⣿⣿⣿
           .8888.'     :'     `'::`88:88888                                          ⣿⣿⣿⣿⣿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿
          .8888        '         `.888:8888.                                         ⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣄⣀⡀⠀⠀⠀⠀⢀⣀⣠⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿  
          888:8         .           888:88888                                                           
        .888:88        .:           888:88888:                                       https://www.twitchquotes.com/copypastas/search?query=ubuntu                    
        8888888.       ::           88:888888                                                           
        `.::.888.      ::          .88888888                                                           
       .::::::.888.    ::         :::`8888'.:. 
      ::::::::::.888   '         .:::::::::::: 
      ::::::::::::.8    '      .:8::::::::::::.
     .::::::::::::::.        .:888:::::::::::::
     :::::::::::::::88:.__..:88888:::::::::::'
      `'.:::::::::::88888888888.88:::::::::'
            `':::_:' -- '' -'-' `':_::::'`

       This ASCII pic can be found at
       https://asciiart.website/index.php?art=logos%20and%20insignias/linux 




                                                        ()============================================()
                                                        ||                                            ||
                                                        ||          'La Academia UBUNTU'              ||
                                                        ||                                            ||
                                                        ||           versión 1.0.0-alfa3              ||
                                                        ||                                            ||
                                                        ||    Creado por Mario Carrillo Gonzàlez      ||
                                                        ||                                            ||
                                                        ()============================================()


    𝑨𝒓𝒕𝒆 𝑨𝑺𝑪𝑰𝑰 𝒄𝒓𝒆𝒂𝒅𝒐 𝒄𝒐𝒏 𝒂𝒚𝒖𝒅𝒂 𝒅𝒆:

    
    https://www.creativefabrica.com

    https://es.rakko.tools/tools/68/

    https://www.ascii-art-generator.org/es.html

    https://github.com/jlevy/the-art-of-command-line

    https://www.twitchquotes.com/

    https://asciiart.website/


    (##)===============================================================================================================================================(##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)----------------------------------------------------------------- ENGLISH ---------------------------------------------------------------------(##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)           MIT License                                                                                                                         (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)           Copyright (c) 2024 - La Academia Ubuntu                                                                                             (##)
    (##)                                                                                                                                               (##)
    (##)           Permission is hereby granted, free of charge, to any person obtaining a copy                                                        (##)
    (##)           of this software and associated documentation files (the 'Software'), to deal                                                       (##)
    (##)           in the Software without restriction, including without limitation the rights                                                        (##)
    (##)           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                                           (##)
    (##)           copies of the Software, and to permit persons to whom the Software is                                                               (##)
    (##)           furnished to do so, subject to the following conditions:                                                                            (##)
    (##)                                                                                                                                               (##)
    (##)           The above copyright notice and this permission notice shall be included in all                                                      (##)
    (##)           copies or substantial portions of the Software.                                                                                     (##)
    (##)                                                                                                                                               (##)
    (##)           THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                                          (##)
    (##)           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                                            (##)
    (##)           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                                         (##)
    (##)           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                                              (##)
    (##)           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                                       (##)
    (##)           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE                                                       (##)
    (##)           SOFTWARE.                                                                                                                           (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)----------------------------------------------------------------- ESPAÑOL ---------------------------------------------------------------------(##)
    (##)                                                                                                                                               (##)
    (##)       Licencia MIT                                                                                                                            (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)       Copyright (c) 2024 - La Academia Ubuntu                                                                                                 (##)
    (##)                                                                                                                                               (##)
    (##)       Por la presente, se concede permiso, de forma gratuita, a cualquier persona que obtenga una copia                                       (##)
    (##)       de este software y archivos de documentacion asociados (el 'Software'), para utilizar                                                   (##)
    (##)       el Software sin restriccion, incluyendo sin limitacion los derechos                                                                     (##)
    (##)       para usar, copiar, modificar, fusionar, publicar, distribuir, sublicenciar y/o vender                                                   (##)
    (##)       copias del Software, y para permitir a las personas a quienes se les proporcione el Software                                            (##)
    (##)       que lo hagan, sujeto a las siguientes condiciones:                                                                                      (##)
    (##)                                                                                                                                               (##)
    (##)       El aviso de copyright anterior y este aviso de permiso se incluirán en                                                                  (##)
    (##)       todas las copias o partes sustanciales del Software.                                                                                    (##)
    (##)                                                                                                                                               (##)
    (##)       EL SOFTWARE SE PROPORCIONA 'TAL CUAL', SIN GARANTIA DE NINGUN TIPO, EXPRESA O                                                           (##)       
    (##)       IMPLICITAS, INCLUYENDO PERO NO LIMITADO A LAS GARANTIAS DE COMERCIALIZACION,                                                            (##)
    (##)       IDONEIDAD PARA UN PROPOSITO PARTICULAR Y NO INFRACCION. EN NINGUN CASO LOS                                                              (##)
    (##)       AUTORES O TITULARES DEL COPYRIGHT SERAN RESPONSABLES POR NINGUN RECLAMO, DAÑOS U OTRA                                                   (##)
    (##)       RESPONSABILIDAD, YA SEA EN UNA ACCION DE CONTRATO, AGRAVIO O CUALQUIER OTRA FORMA, DERIVADOS DE,                                        (##)
    (##)       QUE SURJAN DE, O EN RELACION CON EL SOFTWARE O EL USO U OTROS TIPOS DE ACCIONES EN                                                      (##)
    (##)       EL SOFTWARE.                                                                                                                            (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)                                                                                                                                               (##)
    (##)===============================================================================================================================================(##)

    Por favor, Introdúzca su nombre:


")  


# 3-Introducir nombre de usuario
Nombre = leer()
abc = "Nombre Usuario"

# 4-Mensaje de error si el usuario pone números en lugar de letras
mientras tipo(Nombre) != tipo (abc)

    escribir ("

        ()========================================()
        ()                                        ()
        ()                                        ()
        ()    Por favor, introduzca su nombre:    ()
        ()                                        ()
        ()========================================()
        
    ")


    Nombre = leer()
    limpiar()
fin

limpiar()

# 5-Sección de selección de pantalla de bienvenida
escribir ("



    ██╗  ██╗ ██████╗ ██╗      █████╗ 
    ██║  ██║██╔═══██╗██║     ██╔══██╗
    ███████║██║   ██║██║     ███████║
    ██╔══██║██║   ██║██║     ██╔══██║
    ██║  ██║╚██████╔╝███████╗██║  ██║
    ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝
                                       "..Nombre)
escribir ("


    ██████╗ ██╗███████╗███╗   ██╗██╗   ██╗███████╗███╗   ██╗██╗██████╗  ██████╗      █████╗ 
    ██╔══██╗██║██╔════╝████╗  ██║██║   ██║██╔════╝████╗  ██║██║██╔══██╗██╔═══██╗    ██╔══██╗
    ██████╔╝██║█████╗  ██╔██╗ ██║██║   ██║█████╗  ██╔██╗ ██║██║██║  ██║██║   ██║    ███████║
    ██╔══██╗██║██╔══╝  ██║╚██╗██║╚██╗ ██╔╝██╔══╝  ██║╚██╗██║██║██║  ██║██║   ██║    ██╔══██║
    ██████╔╝██║███████╗██║ ╚████║ ╚████╔╝ ███████╗██║ ╚████║██║██████╔╝╚██████╔╝    ██║  ██║
    ╚═════╝ ╚═╝╚══════╝╚═╝  ╚═══╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝╚═╝╚═════╝  ╚═════╝     ╚═╝  ╚═╝


        ██╗      █████╗      █████╗  ██████╗ █████╗ ██████╗ ███████╗███╗   ███╗██╗ █████╗     ██╗   ██╗██████╗ ██╗   ██╗███╗   ██╗████████╗██╗   ██╗
        ██║     ██╔══██╗    ██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝████╗ ████║██║██╔══██╗    ██║   ██║██╔══██╗██║   ██║████╗  ██║╚══██╔══╝██║   ██║
        ██║     ███████║    ███████║██║     ███████║██║  ██║█████╗  ██╔████╔██║██║███████║    ██║   ██║██████╔╝██║   ██║██╔██╗ ██║   ██║   ██║   ██║
        ██║     ██╔══██║    ██╔══██║██║     ██╔══██║██║  ██║██╔══╝  ██║╚██╔╝██║██║██╔══██║    ██║   ██║██╔══██╗██║   ██║██║╚██╗██║   ██║   ██║   ██║
        ███████╗██║  ██║    ██║  ██║╚██████╗██║  ██║██████╔╝███████╗██║ ╚═╝ ██║██║██║  ██║    ╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║   ██║   ╚██████╔╝
        ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝    ╚═════╝ 







                                                                ⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠋⠉⠁⠀⠀⠀⠀⠈⠉⠙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿
                                                                ⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⣿⣿⣿⣿⣿
                                                                ⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣦⠀⠀⠀⠈⢻⣿⣿⣿
                                                                ⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⢠⣶⣶⣾⣷⣶⣆⠸⣿⣿⡟⠀⠀⠀⠀⠀⠹⣿⣿
                                                                ⣿⠃⠀⠀⠀⠀⠀⠀⣠⣾⣷⡈⠻⠿⠟⠻⠿⢿⣷⣤⣤⣄⠀⠀⠀⠀⠀⠀⠘⣿
                                                                ⡏⠀⠀⠀⠀⠀⠀⣴⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⠀⠀⠀⠀⠀⠀⢹
                                                                ⠁⠀⠀⢀⣤⣤⡘⢿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡇⠀⠀⠀⠀⠀⠈
                                                                ⠀⠀⠀⣿⣿⣿⡇⢸⣿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣉⣉⡁⠀⠀⠀⠀⠀⠀
                                                                ⡀⠀⠀⠈⠛⠛⢡⣾⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⡇⠀⠀⠀⠀⠀⢀
                                                                ⣇⠀⠀⠀⠀⠀⠀⠻⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⠟⠀⠀⠀⠀⠀⠀⣸
                                                                ⣿⡄⠀⠀⠀⠀⠀⠀⠙⢿⡿⢁⣴⣶⣦⣴⣶⣾⡿⠛⠛⠋⠀⠀⠀⠀⠀⠀⢠⣿
                                                                ⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⠿⢿⡿⠿⠏⢰⣿⣿⣧⠀⠀⠀⠀⠀⣰⣿⣿
                                                                ⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⠟⠀⠀⠀⢀⣼⣿⣿⣿
                                                                ⣿⣿⣿⣿⣿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿
                                                                ⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣄⣀⡀⠀⠀⠀⠀⢀⣀⣠⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿



            ()============================================================================================================================()
            ||                                                                                                                            ||
            ||     * Introduce la palabra 'Ubuntu', y despúes presiona la tecla 'Enter', para dirigirte a la pantalla de bienvenida.      ||
            ||                                                                                                                            ||
            ||     * Para cerrar el programa, introduce el número 0 y presiona la tecla 'Enter', o simplemente presiona la tecla 'Enter'. ||
            ||                                                                                                                            ||
            ()============================================================================================================================()


") 

x = leer()
limpiar()

# 6-Mensaje de selección de pantalla de vienvenida si no se ha puesto una respuesta correcta
mientras (x != "Ubuntu") && (x != "ubuntu") && (x != 0)

    escribir ("


        ()============================================================================================================================()
        ()                                                                                                                            ()
        ()    Por favor "..Nombre..", introduzca 'Ubuntu' y presione 'Enter' para dirigirte a la pantalla de bienvenida;              ()
        ()    o introduzca 0 y presione 'Enter' para cerrar el programa, o simprlente presione 'Enter' para cerrar el programa :      ()
        ()                                                                                                                            ()
        ()============================================================================================================================()

    ")
    x = leer()
    limpiar()
fin


# 7-Cuerpo del programa principal donde se encuetra la Biblioteca-Enciclopedia Digital
mientras x != 0

    // Pantalla de bienvenida e introducción
    escribir ("




        ██╗      █████╗      █████╗  ██████╗ █████╗ ██████╗ ███████╗███╗   ███╗██╗ █████╗     ██╗   ██╗██████╗ ██╗   ██╗███╗   ██╗████████╗██╗   ██╗
        ██║     ██╔══██╗    ██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝████╗ ████║██║██╔══██╗    ██║   ██║██╔══██╗██║   ██║████╗  ██║╚══██╔══╝██║   ██║
        ██║     ███████║    ███████║██║     ███████║██║  ██║█████╗  ██╔████╔██║██║███████║    ██║   ██║██████╔╝██║   ██║██╔██╗ ██║   ██║   ██║   ██║
        ██║     ██╔══██║    ██╔══██║██║     ██╔══██║██║  ██║██╔══╝  ██║╚██╔╝██║██║██╔══██║    ██║   ██║██╔══██╗██║   ██║██║╚██╗██║   ██║   ██║   ██║
        ███████╗██║  ██║    ██║  ██║╚██████╗██║  ██║██████╔╝███████╗██║ ╚═╝ ██║██║██║  ██║    ╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║   ██║   ╚██████╔╝
        ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝    ╚═════╝ 
                                                                                                                                            




                                                ()==================================================================()
                                                ||                                                                  ||
                                                ||                                                                  ||
                                                ||       Hola "..Nombre..", bienvenido a                            ||
                                                ||                                                                  ||
                                                ||               𝐿 𝑎  𝐴 𝑐 𝑎 𝑑 𝑒 𝑚 𝑖 𝑎  𝑈 𝑏 𝑢 𝑛 𝑡 𝑢                    ||
                                                ||                                                                  ||
                                                ||                                                                  ||
                                                ||                                                                  ||
                                                ()==================================================================()


        ()==============================================================================================================================================()
        ||                                                                                                                                              || 
        ||   'La Academia Ubuntu' es un proyecto de software libre que pretende ayudar a las personas a aprender y/o mejorar sus habilidades en         || 
        ||    cualquier ámbito del saber, ya sea en ciencias como Matematicas, Química, Física, Biologia, etc., o en estudios como Filosofía, Arte,     || 
        ||    Música, Linguística, Idiomas, etc.; todo bajo la ideología-filosofía 'Ubuntu', así como de la Educación Abierta, Educación Libertária, y  ||
        ||    cualquier ideología-filosofía que fomente la educación gratuita y de la mejor calidad posible, para fomentar un futuro mejor; todo en     ||
        ||    base a la colaboración y el apoyo de la comunidad, de la Inteligencia Colectiva de voluntarios que gusten sumarse a este proyecto,        ||
        ||    el crowdsourcing, La inteligencia artificial, y otras formas de apoyo son bienvenidas para este proyecto                                  ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||    °¬ Significado de la palabra 'Ubuntu'                                                                                                     ||
        ||                                                                                                                                              ||
        ||    Puede que la palabra 'Ubuntu' sea más conocida por ser el nombre de uno de los distro más populares del sistema GNU/Linux; pero esa       ||
        ||    palabra proviene de las lenguas zulú y xhosa, lenguas que son unos idiomas de Sudáfrica.                                                  ||
        ||                                                                                                                                              ||
        ||    Hay varias traducciones posibles del término Ubuntu al español, las comunes son:                                                          ||
        ||                                                                                                                                              ||
        ||      °¬ Humanidad hacia otras personas                                                                                                       ||
        ||      °¬ Si todos ganan, tú ganas                                                                                                             ||
        ||      °¬ Éramos porque nosotros somos                                                                                                         ||
        ||      °¬ Una persona se hace humana a través de las otras personas                                                                            ||
        ||      °¬ Una persona es persona en razón de las otras personas                                                                                ||
        ||      °¬ Yo soy lo que soy en función de lo que todas las personas somos                                                                      ||
        ||      °¬ La creencia es un enlace universal de compartir que conecta a toda la humanidad                                                      ||
        ||      °¬ Humildad                                                                                                                             ||
        ||      °¬ Empatía                                                                                                                              ||
        ||      °¬ Yo soy porque nosotros somos, y dado que somos, entonces yo soy                                                                      ||
        ||      °¬ Nosotros somos, por tanto soy, y dado que soy, entonces somos                                                                        ||
        ||      °¬ El bien común, es el bien propio                                                                                                     ||
        ||                                                                                                                                              ||
        ||    Esta última es una definición más extensa y adecuada:                                                                                     ||
        ||                                                                                                                                              ||
        ||        Una persona con Ubuntu es abierta y está disponible para las demás, respalda a las demás, no se siente amenazada cuando otras son     ||
        ||        capaces y son buenas en algo, porque está segura de sí misma ya que sabe que pertenece a una gran totalidad, que se decrece cuando    ||
        ||        otras personas son humilladas o menospreciadas, cuando otras son torturadas u oprimidas.                                              ||
        ||                                                                                                                            Desmond Tutu      ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||    ( Wikipedia. 31 de Mayo 2024, 21:52 hrs. 'Ubuntu (Filosofía)'. Recuperado el 24 de Agosto del 2024 del sitio                              ||
        ||    https://es.wikipedia.org/wiki/Ubuntu_(filosof%C3%ADa) )                                                                                   ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||      ''El concepto se basa en la creencia de que hay un vínculo humano universal que hace que los seres humanos sean capaces de superar retos||
        ||      porque están conectados.                                                                                                                ||
        ||                                                                                                                                              ||
        ||      'Ubuntu', mencionó Desmond Tutu, es uno de los mejores regalos que le ha dado África a la humanidad. Desmond Tutu fue un eclesiástico   ||
        ||      y político nacido el 7 de octubre de 1931 en Klerksdorp, Sudáfrica. Es reconocido por ser fiel defensor de los derechos humanos a tal   ||
        ||      grado que en 1984 fue reconocido con el Premio Nobel de la Paz por defender a las personas negras oprimidas en Sudáfrica durante la     ||
        ||      segregación y la opresión por el gobierno del apartheid, el cual les negaba los derechos humanos básicos como la libertad de asociación,||
        ||      de circulación y de reunión. Tras una lucha constante contra el cáncer de próstata, falleció el 26 de diciembre del 2021 a              ||
        ||      la edad de noventa años.                                                                                                                ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                            'Ubuntu', soy quien soy por quien eres tú. La ética del cuidado del otro.         ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||      “La base de esta filosofía es el respeto, por uno mismo y por los otros. Por eso, si eres capaz de ver a los demás, incluso a los       ||
        ||      desconocidos, como humanos de pleno derecho, jamás los tratarás mal o como si fueran inferiores”, dijo Hoffman en el seminario del C3.''||
        ||                                                                                                                                              ||
        ||   ( Neri A. Torres. 5 de Mayo del 2022. 'Ubuntu: La filosofía africana de cuidar del otro'. Recuperado el 24 de Agosto del 2024 del sitio.   ||
        ||    https://www.c3.unam.mx/noticias/noticia217.html )                                                                                         ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ||                                                                                                                                              ||
        ()==============================================================================================================================================()


    ")


    // acceso al menú de selección 1
    escribir ("

            ()=============================================================================================================================()
            ()                                                                                                                             ()
            ()    Por favor "..Nombre..", escriba 'menú' para ver el menú; o introduzca 0 y presione 'Enter' para salir de                 ()
            ()    programa, o simplente presione 'Enter' para salir de programa.:                                                          ()
            ()                                                                                                                             ()
            ()=============================================================================================================================()

    ")

    beta = leer()
    limpiar()

    // bucle del menú de selección 1 
    mientras (beta != ("menú") && (beta != ("menu")) && (beta != ("Menú")) && (beta != ("Menu")))


        escribir ("
                                                                                                                                                 
            ()====================================================================================================================================()
            ()                                                                                                                                    () 
            ()    Por favor "..Nombre..", escriba 'menú' y presione 'Enter' para ver el menú; o introduzca 0 y presione 'Enter' para salir de     ()
            ()    programa, o simplente presione 'Enter' para salir de programa :                                                                 ()  
            ()                                                                                                                                    ()
            ()    (Si introdució 0 o simplemente presionó 'Enter' y el programa no se cerró,                                                      ()      
            ()    vuelva a introducir 0 o presione 'Enter' para que el programa se cierre)                                                        ()   
            ()                                                                                                                                    ()   
            ()====================================================================================================================================()
        ")

        beta = leer()
        limpiar()

        si beta == 0
            romper
        fin
    fin

    si beta == 0
        romper
    fin
    

    // vista del menú de selección 1
    escribir ("


        Hola "..Nombre.." Estás en el menú de opciones de la Academia Ubuntu. aquí puedes elegir la materia que quieres estudiar.

        Por favor "..Nombre..", introduce el número correspondiente a la materia que quieres estudiar:


        ()=========================================================================()
        ||     1. Matemáticas                      13. Arte                        ||
        ||     2. Química                          14. Música                      ||
        ||     3. Física                           15. Lenguaje y Comunicación     ||
        ||     4. Biología                         16. Ciencias                    ||
        ||     5. Informática                      17. Sociologia                  ||
        ||     6. Electricidad                     18. Programación                ||
        ||     7. Electrónica                      19. Administración              ||
        ||     8. Filosofía                        20. Inglés                      ||
        ||     9. Lógica                           21. Historia                    ||
        ||     10. Ciencias Politicas              22. Lingüística                 ||
        ||     11. Derecho                                                         ||
        ||     12. Medicina                                                        ||
        ()=========================================================================()
    



        "..Nombre..", si deseas salir del programa, solo escriba 0 y presione 'Enter', o simplemente presione 'Enter' para cerrar el programa. 
    ")

    x = leer()
    limpiar()

    // Panel de selección de los módulos (Donde está la Biblioteca-Enciclopedia Digital)
    elegir (x)
        caso 0://Salida de la Biblioteca-Enciclopedia Digital
            si x == 0
                romper
            fin
        caso 1://Módulo de Matemáticas

            escribir ("Hola "..Nombre)
            escribir ("


                ()==================================================================================================================================()
                ||                                                                                                                                  ||
                ||    * itroduce cualquier número o letra, y después presiona la tecla 'Enter' para ver el módulo de Matemáticas.                   ||                                                                                                              
                ||                                                                                                                                  ||     
                ||    * introduce el número 0 y presiona la tecla 'Enter' para volver al menú principal, o simplemente presiona la tecla 'Enter'.   ||                                     ||                                                                                       
                ||                                                                                                                                  ||     
                ()==================================================================================================================================()
                

            ")

            eleMenu = leer()
            limpiar()

            mientras eleMenu != 0

                escribir ("
            
                    Hola, bienvenido: haz elegido la materia de Matemáticas
                    
        
                    Por favor, introduce el número correspondiente a la rama que quieres estudiar:
        
                    1. Aritmética
                    2. Àlgebra
                    3. Geometría
                    4. Cálculo
        
                    para salirr al menù principal introduce 0 y presiona la tecla 'Enter'
    
    
    
                ")


                eleMenu = leer()
                limpiar()

                elegir (eleMenu)
                    
                    caso 1:

                        escribir ("
                        
                        Haz elegido Aritmética
                        
                        ¿qué rama de la Aritmetica te gustaría estudiar?

                        1. números
                        2. Operaciones
                        
                        *Presiona cualquier número o letra para volver al menù de Matemáticas.
                        
                        *Presiona 0 y presiona la tecla 'Enter' para volver al menù principal, o simplemente presiona la tecla 'Enter'.
                        
                        ")

                        eleMenu = leer()
                        limpiar()

                    caso 2:

                        escribir ("
                        
                        Haz elegido Àlgebra
                        
                        ¿qué rama de la Álgebra te gustaría estudiar?

                        1. Geometría
                        2. Cálculo

                        *Presiona cualquier número o letra para volver al menù de Matemáticas.
                        
                        *Presiona 0 y presiona la tecla 'Enter' para volver al menù principal, o simplemente presiona la tecla 'Enter'.
                        
                        
                        ")

                        eleMenu = leer()
                        limpiar()

                    caso 3:

                        escribir ("
                        
                        Haz elegido Geometrìa
                        
                        ¿qué rama de la Geometría te gustaría estudiar?

                        1. Cálculo
                        2. Cálculo

                        *Presiona cualquier número o letra para volver al menù de Matemáticas.
                        
                        *Presiona 0 y presiona la tecla 'Enter' para volver al menù principal, o simplemente presiona la tecla 'Enter'.
                        
                        ")

                        eleMenu = leer()
                        limpiar()

                    caso 4:

                        escribir ("
                        
                        
                        Haz elegido Cálculo
                        
                        ¿qué rama de la Cálculo te gustaría estudiar?
                        
                        1. Aritmética
                        2. Álgebra
                        
                        *Presiona cualquier número o letra para volver al menù de Matemáticas.
                        
                        *Presiona 0 y presiona la tecla 'Enter' para volver al menù principal, o simplemente presiona la tecla 'Enter'.
                        
                        ")

                        eleMenu = leer()
                        limpiar()
                        

                    defecto :

                        escribir ("

                        *Introduce cualquier número o letra, y preiona enter para volver al menú de Matemáticas.
                        
                        *Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.
                        
                        ")

                        eleMate = leer()
                        limpiar()                    
                fin
            fin


        caso 2://Módulo de Química
            escribir ("Haz elegido Química")
            escribir ("¿qué rama de la Quìmica te gustaría estudiar?")
        caso 3://Módulo de Física
            escribir ("Haz elegido Física")
            escribir ("¿qué rama de la Física te gustaría estudiar?")
        caso 4://Módulo de Biología
            escribir ("Haz elegido Biología")
            escribir ("¿qué rama de la Biología te gustaría estudiar?")
        caso 5://Módulo de Informática
            escribir ("Haz elegido Informática")
            escribir ("¿qué rama de la Informática te gustaría estudiar?")
        caso 6://Módulo de Electricidad
            escribir ("Haz elegido Electricidad")
            escribir ("¿qué rama de la Electricidad te gustaría estudiar?")
        caso 7://Módulo de Electrónica
            escribir ("Haz elegido Electrónica")
            escribir ("¿qué rama de la Electrónica te gustaría estudiar?")
        caso 8://Módulo de Filosofía
            escribir ("Haz elegido Filosofía")
            escribir ("¿qué rama de la Filosofía te gustaría estudiar?")
        caso 9://Módulo de Lógica
            escribir ("Haz elegido Lógica")
            escribir ("¿qué rama de la Lógica te gustaría estudiar?")
        caso 10://Módulo de Ciencias Políticas
            escribir ("Haz elegido Ciencias Políticas")
            escribir ("¿qué rama de las Ciencias Políticas te gustaría estudiar?")
        caso 11://Módulo de Derecho
            escribir ("Haz elegido Derecho")
            escribir ("¿qué rama del Derecho te gustaría estudiar?")
        caso 12://Módulo de Medicina
            escribir ("Haz elegido Medicina")
            escribir ("¿qué rama de la Medicina te gustaría estudiar?")
        caso 13://Módulo de Arte
            escribir ("Haz elegido Arte")
            escribir ("¿qué rama de la Arte te gustaría estudiar?")
        caso 14://Módulo de Música
            escribir ("Haz elegido Música")
            escribir ("¿qué rama de la Música te gustaría estudiar?")
        caso 15://Módulo de Lenguaje y Comunicación
            escribir ("Haz elegido Lenguaje y Comunicación")
            escribir ("¿qué rama de la Lenguaje y Comunicación te gustaría estudiar?")
        caso 16://Módulo de Ciencia
            escribir ("Haz elegido Ciencia")
            escribir ("¿qué rama de la Ciencias te gustaría estudiar?")
        caso 17://Módulo de Sociología
            escribir ("Haz elegido Sociología")
            escribir ("¿qué rama de la Sociología te gustaría estudiar?")
        caso 18://Módulo de Programación

            escribir ("Hola "..Nombre)
            escribir ("


                ()==================================================================================================================================()
                ||                                                                                                                                  ||
                ||    * itroduce cualquier número o letra, y después presiona la tecla 'Enter' para entrar al módulo de Programación.               ||
                ||                                                                                                                                  ||
                ||    * introduce el número 0 y presiona la tecla 'Enter' para volver al menú principal, o simplemente presiona la tecla 'Enter'.   ||
                ||                                                                                                                                  ||
                ()==================================================================================================================================()
                

            ")


            eleMenu = leer()
            limpiar()

            mientras eleMenu != 0


                escribir ("

                                
                    ()============================================================================================================()
                    ()                                                                                                            ()
                    ()    ███████╗ ██████╗  ██████╗  ██████╗ ██████╗  █████╗ ███╗   ███╗ █████╗  ██████╗██╗ ██████╗ ███╗   ██╗    ()
                    ()    ███╔══██╗██╔══██╗██╔═══██╗██╔════╝ ██╔══██╗██╔══██╗████╗ ████║██╔══██╗██╔════╝██║██╔═══██╗████╗  ██║    ()
                    ()    ███████╔╝██████╔╝██║   ██║██║  ███╗██████╔╝███████║██╔████╔██║███████║██║     ██║██║   ██║██╔██╗ ██║    ()
                    ()    ███╔═══╝ ██╔══██╗██║   ██║██║   ██║██╔══██╗██╔══██║██║╚██╔╝██║██╔══██║██║     ██║██║   ██║██║╚██╗██║    ()
                    ()    ███║     ██║  ██║╚██████╔╝╚██████╔╝██║  ██║██║  ██║██║ ╚═╝ ██║██║  ██║╚██████╗██║╚██████╔╝██║ ╚████║    ()
                    ()     ╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝    ()
                    ()                                                                                                            ()
                    ()============================================================================================================()
                                
                                

                    ()===========================================================()
                    ()                                                           ()
                    ()  Hola, "..Nombre..": bienvenido almódulo de Programación  ()
                    ()                                                           ()
                    ()===========================================================()
                    
                    ()=====================================================================================================================================================()
                    ()                                                                                                                                                     ()
                    ()    🄲 🅄 🄰 🄻 🅀 🅄 🄸 🄴 🅁  🅃 🄾 🄽 🅃 🄾  🄿 🅄 🄴 🄳 🄴  🄴 🅂 🄲 🅁 🄸 🄱 🄸 🅁  🄲 🄾 🄳 🄸 🄶 🄾  🅀 🅄 🄴  🅄 🄽 🄰  🄲 🄾 🄼 🄿 🅄 🅃 🄰 🄳 🄾 🅁 🄰      ()
                    ()    🄴 🄽 🅃 🄸 🄴 🄽 🄳 🄰.  🄻 🄾 🅂  🄱 🅄 🄴 🄽 🄾 🅂   🄿 🅁 🄾 🄶 🅁 🄰 🄼 🄰 🄳 🄾 🅁 🄴 🅂  🄴 🅂 🄲 🅁 🄸 🄱 🄴 🄽  🄲 🄾 🄳 🄸 🄶 🄾  🅀 🅄 🄴  🄻 🄾 🅂    ()
                    ()    🄷 🅄 🄼 🄰 🄽 🄾 🅂  🄿 🅄 🄴 🄳 🄰 🄽  🄴 🄽 🅃 🄴 🄽 🄳 🄴 🅁                                                                                        ()
                    ()                                                                                                                                                     ()
                    ()                                                                           🄼 🄰 🅁 🅃 🄸 🄽   🄵 🄾 🅆 🄻 🄴 🅁                                         ()
                    ()                                                                                                                                                     ()
                    ()=====================================================================================================================================================()
                    
                    ()============================================================================================================================()
                    ()                                                                                                                            ()
                    ()    * Para ver el índice de la Sección de Programación, introduce el número 1                                               ()
                    ()                                                                                                                            ()
                    ()    * Para salir al menú principal, introduzca 0 y presione la tecla 'Enter', o simplemente presione la tecla 'Enter'.      ()
                    ()                                                                                                                            ()
                    ()============================================================================================================================()



                ")

                eleMenu = leer()
                limpiar()


                mientras eleMenu != 0 && eleMenu != 1 
                    escribir ("
                    
                        "..Nombre.." No haz elegido una respuesta válida
                    

                        ()==================================================================================================================================()
                        ()                                                                                                                                  ()
                        ()                                                                                                                                  ()
                        ()    * Para ver el índice del módulo de Programación, introduce el número 1                                                        ()  
                        ()                                                                                                                                  ()
                        ()    * Para salir al menú principal, introduzca 0 y presione la tecla 'Enter', o simplemente presione la tecla 'Enter'.            ()
                        ()                                                                                                                                  ()
                        ()                                                                                                                                  ()
                        ()==================================================================================================================================()


                    ")

                    eleMenu = leer()
                    limpiar()

                fin

                si eleMenu == 0
                    romper
                fin

                escribir ("
                
                    Hola "..Nombre..": este es el índice del módulo de Programación; aquí podras elegir el tema que quieras estudiar.
                    Los temas no van en secuencia, por lo que puedes elegir cualquiera de los temas que se muestran sin que hayas tenido que
                    estudiar alguno de los temas anteriores, así que sientete con libertad de elegir cualquiera de los temas que te gusten

                    ¿Con cuál tema te gustaría iniciar?    
                
                    Índice de Programación

                    1. Introducción a la Programación                             8. Bases de datos
                    2. Historia de la Programación                                9. Desarrollo Web 
                    3. Fundamentos de la Programación                             10. seguridad en Programación
                    4. Lenguajes de Programación                                  11. Lenguaje de Programación Latino
                    5. Paradigmas de Programación                                 12. Lenguaje de Programación C
                    6. Desarrollo de Software                                     13. Tópicos avanzados en Programación
                    7. Estructuras de datos y Algoritmos                          14. Recursos y Herramientas de Programación
                                                                                  15. Proyectos y ejercicios prácticos  
                
                
                
                    ")
                

                eleMenu = leer()
                limpiar()


                elegir (eleMenu)

                    caso 1://Introducción a la Programación (##-Completo)
                        escribir ("
            
                                1. Introducción a la Programación

                                    'La programación no es solo escribir código, es el arte de resolver 
                                    problemas y convertir ideas en realidad a través de la lógica y la creatividad'

                                    Por favor, eliga un tema para comenzar:


                                 
                                    1. ¿Qué es la Programación?
                                    2. Importancia de la Programación en la Era Digital
                                    3. Áreas de Aplicación de la Programación
                                
                            
                        ")

                        eleP = leer()
                        limpiar()


                        elegir (eleP)

                            caso 1:

                                escribir ("
                                
                                ¿Qué es la Programación?

                                ### Introducción a la Programación

                                #### ¿Qué es la Programación?

                                **Programación** es el arte de darle instrucciones a una computadora para que realice tareas específicas. Imagina que tienes 
                                un asistente personal que sigue tus órdenes al pie de la letra. La programación es como escribir un conjunto de instrucciones 
                                detalladas que este asistente sigue para completar una tarea.

                                **Analogía simple:**

                                Piense en la programación como en la cocina. Si quieres preparar un platillo, necesitas una receta. La receta te dice los 
                                ingredientes, las cantidades y los pasos a seguir para preparar la comida. De manera similar, un programa de computadora 
                                es como una receta para la máquina: contiene 'ingredientes' (datos), 'instrucciones' (código) y 'procedimientos' 
                                (algoritmos) que guían a la computadora en cómo procesar esos datos y producir un resultado.

                                **Para principiantes:**

                                1. **¿Qué es un programa?** 
                                
                                Un programa es un conjunto de instrucciones que una computadora sigue para realizar una tarea. Estas instrucciones están 
                                escritas en un lenguaje de programación, que es una forma de comunicación entre humanos y máquinas.
                                
                                2. **¿Cómo funciona?** 
                                
                                Cuando escribes un programa, estás creando una serie de comandos que la computadora ejecutará. Por ejemplo, un programa 
                                simple podría decirle a la computadora que muestre un mensaje en la pantalla. A medida que los programas se vuelven 
                                más complejos, incluyen instrucciones para hacer cosas como calcular números, mostrar imágenes o interactuar con otros 
                                programas.

                                **Para expertos:**

                                La programación implica una combinación de lógica, estructura y creatividad. Los programas están escritos en lenguajes 
                                de programación que permiten expresar algoritmos de manera que las máquinas puedan entender y ejecutar. Estos lenguajes 
                                tienen una sintaxis y semántica propias que definen cómo se deben estructurar y entender las instrucciones.

                                1. **Lógica y Algoritmos** 
                                
                                En programación, se utilizan algoritmos para resolver problemas de manera sistemática. Un algoritmo 
                                es un conjunto finito de pasos que transforman una entrada en una salida. Los expertos en programación 
                                diseñan algoritmos eficientes para optimizar el rendimiento y la eficacia del software.

                                2. **Lenguajes de Programación** 
                                
                                Cada lenguaje de programación tiene características y paradigmas específicos que afectan cómo se escribe 
                                y se organiza el código. Desde lenguajes imperativos y funcionales hasta orientados a objetos, la elección 
                                del lenguaje puede influir en la estructura y el rendimiento del programa.

                                3. **Abstracción y Diseño** 
                                
                                Los programadores expertos utilizan principios de diseño y abstracción para construir sistemas complejos 
                                a partir de componentes más simples. Este enfoque modular permite manejar la complejidad al dividir el 
                                problema en partes más manejables y reutilizables.

                                **Conclusión:**

                                La programación no solo es una habilidad técnica, sino también un proceso creativo y analítico. Permite transformar 
                                ideas abstractas en aplicaciones concretas y funcionales. Al igual que un chef necesita comprender los ingredientes 
                                y técnicas de cocina para crear un plato perfecto, un programador necesita entender los conceptos y herramientas del 
                                lenguaje para construir programas eficientes y efectivos.
                                                                
                                
                                
                                
                                
                                
                                ")
                                sis.dormir(5)


                            caso 2:
                                escribir ("
                                
                                ### Introducción a la Programación

                                #### Importancia de la Programación en la Era Digital

                                **La programación** ha revolucionado el mundo moderno, transformando cómo vivimos, trabajamos y 
                                nos comunicamos. En la era digital, la programación no es solo una habilidad técnica, sino una 
                                herramienta fundamental que impulsa la innovación y el progreso en todos los aspectos de la vida 
                                cotidiana.
                                
                                **Analogía simple:**
                                
                                Imagina que el mundo es como una gigantesca orquesta sinfónica. En esta orquesta, cada instrumento 
                                tiene un papel específico y contribuye al rendimiento general de la música. La programación es como 
                                el director de orquesta: coordina y organiza todos los 'instrumentos' tecnológicos (dispositivos, 
                                aplicaciones, servicios) para crear una sinfonía coherente y armoniosa que hace que nuestra vida sea 
                                más eficiente y entretenida.
                                
                                **Para principiantes:**
                                
                                1. **Tecnología en la Vida Diaria:** La programación está en el corazón de muchas tecnologías que 
                                usamos todos los días. Desde las aplicaciones en nuestros teléfonos móviles hasta los sitios web que 
                                visitamos, la programación hace que estas herramientas funcionen. Si alguna vez has usado una aplicación 
                                para pedir comida, compartir fotos o realizar una videollamada, has interactuado con el resultado del 
                                trabajo de programadores.
                                
                                2. **Automatización y Eficiencia:** La programación permite automatizar tareas repetitivas, lo que ahorra 
                                tiempo y reduce errores. Por ejemplo, en lugar de ingresar datos manualmente en una hoja de cálculo, un 
                                programa puede hacerlo automáticamente, permitiendo que las personas se concentren en tareas más importantes.
                                
                                **Para expertos:**
                                
                                1. **Impulso a la Innovación:** En la era digital, la programación es un motor clave para la innovación. Los 
                                desarrolladores crean nuevas soluciones que cambian industrias enteras, desde la inteligencia artificial y el 
                                aprendizaje automático hasta la realidad aumentada y la computación en la nube. Cada avance tecnológico 
                                comienza con una idea que se convierte en código.
                                
                                2. **Interconexión Global:** La programación facilita la interconexión global, permitiendo que dispositivos y 
                                sistemas de todo el mundo se comuniquen entre sí. Tecnologías como el Internet de las Cosas (IoT) y las redes 
                                distribuidas dependen de la programación para funcionar correctamente, creando una red global de datos y servicios 
                                interconectados.
                                
                                3. **Transformación Digital:** Las empresas y organizaciones están en medio de una transformación digital 
                                impulsada por la programación. Los sistemas de gestión, las plataformas de comercio electrónico, y las 
                                soluciones de análisis de datos permiten a las empresas operar de manera más eficiente, tomar decisiones informadas 
                                y ofrecer servicios personalizados a los clientes.
                                
                                4. **Desarrollo de Nuevas Fronteras:** Los programadores están en la vanguardia de campos emergentes como la computación 
                                cuántica y la biotecnología. La capacidad de escribir código para resolver problemas complejos y explorar nuevas 
                                posibilidades es crucial para avanzar en estos campos y enfrentar desafíos globales.
                                
                                **Conclusión:**
                                
                                La programación es una fuerza poderosa que impulsa la evolución tecnológica y social. Al igual que un director de 
                                orquesta crea armonía a partir de una variedad de instrumentos, la programación une y optimiza diversas tecnologías 
                                para mejorar nuestras vidas. En la era digital, entender la importancia de la programación es reconocer su papel 
                                esencial en la creación de un futuro más conectado, eficiente e innovador.
                                
                                
                                
                                ")

                                sis.dormir(5)

                            
                            caso 3:
                                escribir ("


                                ### Introducción a la Programación

                                #### Áreas de Aplicación de la Programación
                                
                                La programación tiene una **amplia gama de aplicaciones** que afectan casi todos los aspectos 
                                de nuestras vidas, desde la manera en que trabajamos y nos comunicamos hasta cómo nos entretenemos 
                                y cuidamos nuestra salud. Para entender su impacto, es útil pensar en la programación como 
                                una herramienta universal que puede ser adaptada para resolver una variedad infinita de 
                                problemas.
                                
                                **Analogía simple:**
                                
                                Imagina que la programación es como un **cuchillo suizo multiusos**. Así como un cuchillo suizo puede 
                                ser usado para cortar, abrir botellas, y destornillar, la programación puede ser aplicada en muchos 
                                campos diferentes para resolver distintos tipos de problemas y mejorar nuestras vidas.
                                
                                **Para principiantes:**
                                
                                1. **Aplicaciones Móviles y Web:** La programación es el corazón de las aplicaciones que usamos en 
                                nuestros teléfonos y navegadores web. Desde aplicaciones para redes sociales hasta juegos móviles, 
                                la programación hace posible que estos programas funcionen de manera eficiente y ofrezcan una 
                                experiencia de usuario fluida.
                                
                                2. **Tecnología de Consumo:** En los dispositivos que usamos todos los días, como televisores 
                                inteligentes, electrodomésticos conectados a internet y dispositivos de asistencia personal, 
                                la programación permite que estos productos sean inteligentes y interactivos, mejorando nuestra 
                                comodidad y entretenimiento.
                                
                                3. **Educación y Aprendizaje:** La programación también se utiliza en plataformas educativas en 
                                línea, desde cursos interactivos hasta aplicaciones de aprendizaje de idiomas. Estas herramientas 
                                ayudan a estudiantes de todas las edades a adquirir nuevas habilidades y conocimientos de manera 
                                más efectiva.
                                
                                **Para expertos:**
                                
                                1. **Ciencia de Datos y Análisis:** En el mundo de la ciencia de datos, la programación es esencial 
                                para analizar grandes volúmenes de información y extraer insights significativos. Los científicos 
                                de datos utilizan lenguajes de programación para desarrollar modelos predictivos, realizar análisis 
                                estadísticos y visualizar datos, lo que ayuda a tomar decisiones basadas en datos.
                                
                                2. **Inteligencia Artificial y Machine Learning:** La programación es fundamental para el desarrollo 
                                de sistemas de inteligencia artificial (IA) y aprendizaje automático. Los algoritmos de IA, como los 
                                utilizados en el reconocimiento de imágenes o la comprensión del lenguaje natural, son diseñados y 
                                optimizados a través de código, permitiendo que las máquinas aprendan y realicen tareas complejas de 
                                manera autónoma.
                                
                                3. **Desarrollo de Sistemas y Redes:** En el ámbito de la infraestructura tecnológica, la programación 
                                es utilizada para diseñar y mantener sistemas operativos, redes y bases de datos. Los administradores 
                                de sistemas y los ingenieros de redes programan scripts y herramientas para asegurar la eficiencia y 
                                la seguridad de las redes y los sistemas informáticos.
                                
                                4. **Simulación y Modelado:** La programación es crucial en la simulación y modelado de fenómenos 
                                complejos, como la predicción del clima, la simulación de procesos industriales o el diseño de vehículos. 
                                Los modelos computacionales permiten a los investigadores y a los ingenieros experimentar y optimizar 
                                sus diseños en entornos virtuales antes de llevarlos a la realidad.
                                
                                5. **Tecnología Espacial y Científica:** En la exploración espacial y la investigación científica, la 
                                programación se utiliza para controlar satélites, analizar datos de telescopios y realizar simulaciones 
                                de experimentos. Los científicos y los ingenieros dependen del software para manejar equipos avanzados 
                                y procesar datos complejos en sus investigaciones.
                                
                                **Conclusión:**
                                
                                La programación es una habilidad versátil que se aplica en una variedad de áreas, desde la vida cotidiana 
                                hasta los avances tecnológicos de vanguardia. Al igual que un cuchillo suizo multiusos puede ser utilizado 
                                para diferentes propósitos, la programación permite crear soluciones adaptables para numerosos problemas 
                                y necesidades en diferentes campos. Esta adaptabilidad es lo que hace que la programación sea una herramienta 
                                esencial en la era digital, impulsando la innovación y mejorando nuestras vidas en formas que a menudo ni 
                                siquiera imaginamos.
    
    
    
    
                             ")

                             sis.dormir(5)
                            defecto:
                                escribir ("No haz elegido una respuesta válida, vuelve a intentarlo")
                        fin

                        


                        escribir ("
                                                                                                                                   
                          ()========================================================================================================()
                          ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                          ()                                                                                                        ()
                          ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                          ()                                                                                                        ()
                          ()========================================================================================================()
  


                        ")
                        eleMenu = leer()
                        limpiar()


                    caso 2://Historia de la Programación (##-Completo)
                        escribir ("
                
                            2. Historia de la Programación

                                'La programación hoy en día es una carrera entre los ingenieros de 
                                software, que se esfuerzan en construir programas más grandes y mejores 
                                a prueba de idiotas, y el universo, que se esfuerza en producir idiotas 
                                más grandes y mejores. Hasta ahora, el universo está ganando.'
    
                                                                                             


                            Por favor, eliga un tema para comenzar:

                            1. Primeros Lenguajes de Programación
                            2. Evolución de la Programación a lo Largo de las Décadas
                            3. Influencias Modernas en la Programación
                        
                        ")


                        eleP = leer()
                        limpiar()


                        elegir (eleP)

                            caso 1:

                                escribir ("
                                
                                ### Historia de la Programación

                                    #### Primeros Lenguajes de Programación
                                    
                                    Los primeros lenguajes de programación son los cimientos sobre los cuales se construyó 
                                    toda la tecnología que conocemos hoy. Estos lenguajes fueron los primeros intentos 
                                    de comunicarse con las máquinas de manera que pudieran realizar cálculos y tareas específicas, 
                                    mucho antes de que los modernos lenguajes de alto nivel y entornos de desarrollo existieran.
                                    
                                    **Analogía simple:**
                                    
                                    Imagina que estás en una antigua biblioteca con libros muy antiguos escritos en un idioma que 
                                    casi nadie entiende hoy en día. Estos libros son como los primeros lenguajes de programación: aunque 
                                    son rudimentarios y difíciles de usar comparados con los modernos, fueron los primeros intentos de 
                                    capturar y transmitir conocimiento de una manera que eventualmente se convirtió en algo mucho más 
                                    accesible y sofisticado.
                                    
                                    **Para principiantes:**
                                    
                                    1. **Máquina de Turing (1936):** Aunque no es un lenguaje de programación per se, la máquina de Turing, 
                                    propuesta por Alan Turing, es la base teórica de la programación moderna. Imagina una máquina con 
                                    una cinta infinita que puede leer y escribir símbolos, moviéndose hacia adelante y hacia atrás. Esta máquina 
                                    conceptual ayudó a establecer las bases para entender qué significa computar y cómo se pueden resolver 
                                    problemas con una máquina.
                                    
                                    2. **Lenguaje de Ensamblador (1950s):** El lenguaje de ensamblador fue uno de los primeros lenguajes de 
                                    programación que permitieron a los programadores escribir instrucciones para las computadoras en un formato 
                                    más comprensible que el código binario puro. Es como tener un diccionario que traduce un idioma extremadamente 
                                    técnico (el lenguaje máquina) a uno un poco más entendible, pero aún así muy específico.
                                    
                                    3. **Fortran (1957):** Fortran, abreviatura de 'Formula Translation', fue uno de los primeros lenguajes de 
                                    alto nivel. Diseñado para hacer cálculos científicos y matemáticos, es como tener una calculadora muy 
                                    avanzada que también puede manejar operaciones más complejas y escribirlas de manera más comprensible. Fue 
                                    revolucionario porque permitió a los científicos y matemáticos escribir programas sin tener que trabajar 
                                    directamente con el código de máquina.
                                    
                                    4. **COBOL (1959):** COBOL, que significa 'COmmon Business-Oriented Language', fue diseñado para aplicaciones 
                                    comerciales y de negocios. Imagina una herramienta de oficina universal que puede manejar tareas de contabilidad, 
                                    procesamiento de nómina y más, todo en un lenguaje que es más fácil de entender y de usar para los profesionales 
                                    de negocios. COBOL facilitó la creación de software para la gestión empresarial y sigue siendo usado en muchos 
                                    sistemas críticos.
                                    
                                    **Para expertos:**
                                    
                                    1. **Lenguaje de Ensamblador y Primeros Compiladores:** El lenguaje de ensamblador permitió a los programadores 
                                    escribir código en una forma más abstracta que el lenguaje máquina. Sin embargo, este código aún requería un 
                                    ensamblador para convertirlo en código máquina. Los primeros compiladores, como el desarrollado para Fortran, 
                                    permitieron la traducción automática de un lenguaje de alto nivel a código máquina, facilitando la programación 
                                    y la creación de software complejo.
                                    
                                    2. **Algoritmos y Programación Estructurada:** Con el tiempo, los conceptos de programación estructurada, que 
                                    abogan por el uso de estructuras de control como bucles y condiciones para organizar el código, comenzaron a 
                                    emerger. Lenguajes como ALGOL (1958) y posteriormente C (1972) introdujeron estas ideas, permitiendo a los 
                                    programadores escribir código más modular y mantenible. Estos lenguajes establecieron muchas de las prácticas y 
                                    paradigmas que todavía son fundamentales en la programación moderna.
                                    
                                    3. **Desarrollo de Paradigmas y Lenguajes Modernos:** A medida que la tecnología avanzaba, surgieron lenguajes 
                                    que introdujeron nuevos paradigmas y conceptos, como la programación orientada a objetos con Smalltalk (1970s) y 
                                    C++ (1980s), o la programación funcional con Lisp (1958) y Haskell (1990s). Estos lenguajes y paradigmas ampliaron 
                                    las posibilidades de lo que se podía hacer con la programación y establecieron las bases para muchos de los lenguajes 
                                    y técnicas que usamos hoy.
                                    
                                    **Conclusión:**
                                    
                                    Los primeros lenguajes de programación pueden parecer rudimentarios en comparación con las sofisticadas herramientas 
                                    de hoy, pero fueron cruciales para el desarrollo de la informática moderna. Al igual que los primeros escritos en 
                                    una biblioteca antigua, estos lenguajes sentaron las bases sobre las cuales se construyó toda la tecnología y 
                                    los avances en programación que seguimos utilizando y desarrollando en la actualidad. La evolución de los lenguajes 
                                    de programación refleja el progreso continuo en la manera en que entendemos y trabajamos con las máquinas, desde los 
                                    primeros días hasta la era digital actual.
                                                                
                                
                                
                                
                                
                                
                                ")
                                sis.dormir(5)


                            caso 2:
                                escribir ("

                                        ### Historia de la Programación
                                        
                                        #### Evolución de la Programación a lo Largo de las Décadas
                                        
                                        La evolución de la programación es una historia de crecimiento y sofisticación que ha 
                                        transformado la manera en que interactuamos con las computadoras. Desde los primeros 
                                        días de la informática hasta los sistemas complejos de hoy, cada década ha traído avances 
                                        que han expandido las capacidades y la accesibilidad de la programación. 
                                        
                                        **Analogía simple:**
                                        
                                        Imagina la evolución de la programación como el desarrollo de un vehículo desde un carruaje 
                                        tirado por caballos hasta un automóvil de última generación. Al igual que el carruaje evolucionó 
                                        en un coche con motores más potentes y tecnología avanzada, la programación ha pasado de instrucciones 
                                        simples y directas a lenguajes sofisticados y entornos de desarrollo completos que permiten la 
                                        creación de aplicaciones complejas.
                                        
                                        **Para principiantes:**
                                        
                                        1. **1950s - Los Primeros Lenguajes y Computadoras:**

                                        - En los años 50, la programación se realizaba en lenguajes de bajo nivel como el lenguaje de 
                                        ensamblador, que directamente manipula el hardware. Piensa en esto como manejar un vehículo básico 
                                        sin dirección asistida ni sistema de navegación. La programación era más directa pero también más 
                                        complicada, ya que los programadores debían gestionar cada aspecto de la máquina.

                                        - **Fortran** (1957) y **COBOL** (1959) introdujeron lenguajes de alto nivel, como si se hubiera 
                                         añadido dirección asistida al vehículo, permitiendo a los programadores escribir código en un 
                                         formato más comprensible y centrado en la lógica de los problemas, en lugar de los detalles técnicos 
                                         del hardware.
                                        
                                        2. **1960s - Programación Estructurada:**

                                        - Los años 60 trajeron la **programación estructurada**, que introdujo conceptos como funciones y estructuras 
                                        de control que organizan el código de manera más clara. Imagina un coche que ahora tiene un sistema de navegación 
                                        integrado, haciendo que sea más fácil planificar y seguir un viaje sin perderse en el camino.

                                        - Lenguajes como **ALGOL** (1958) y **C** (1972) ofrecieron herramientas para escribir código más organizado y 
                                        modular, facilitando la creación de programas más complejos.
                                        
                                        3. **1980s - Programación Orientada a Objetos y Lenguajes de Alto Nivel:**

                                        - La década de los 80 vio la llegada de la **programación orientada a objetos** (POO), que permite a los 
                                        programadores modelar el software en términos de objetos que representan entidades del mundo real. Esto es como 
                                        tener un coche con control de crucero y sensores de estacionamiento: ahora es más fácil y eficiente manejar tareas 
                                        complejas al organizar el código en bloques reutilizables.

                                        - **C++** y **Smalltalk** son ejemplos de lenguajes que introdujeron y popularizaron estos conceptos, facilitando 
                                        la creación de software modular y escalable.
                                        
                                        4. **1990s - Internet y Desarrollo Web:**

                                        - Con el auge de Internet en los años 90, la programación se expandió a **desarrollo web**. Ahora, los vehículos 
                                        incluyen características modernas como sistemas de entretenimiento y conexión a internet. De manera similar, los 
                                        programadores empezaron a crear páginas web y aplicaciones en línea usando lenguajes como **HTML**, **JavaScript** 
                                        y **PHP**.

                                        - La aparición de **Java** (1995) también permitió la creación de aplicaciones portátiles que pueden ejecutarse 
                                        en diferentes plataformas, como un coche que funciona en cualquier tipo de terreno.
                                        
                                        5. **2000s - Programación en la Nube y Mobile:**

                                        - En el siglo XXI, la programación se ha adaptado a nuevas tecnologías como la **nube** y los **dispositivos 
                                        móviles**. Esto es como tener un coche eléctrico con capacidades de auto-conducción y conectividad constante: ahora 
                                        podemos desarrollar y ejecutar aplicaciones desde cualquier lugar y en cualquier dispositivo.
                                        
                                        - Los lenguajes y plataformas modernas como **Python**, **Swift** y **Node.js** facilitan el desarrollo de 
                                        aplicaciones escalables y móviles, permitiendo a los desarrolladores construir soluciones innovadoras para una 
                                        amplia gama de dispositivos y servicios.
                                        
                                        6. **2020s - Inteligencia Artificial y Computación Cuántica:**

                                        - Hoy en día, la programación está explorando áreas avanzadas como la **inteligencia artificial** (IA) y la 
                                        **computación cuántica**. Imagina tener un coche que no solo se conduce solo, sino que también aprende y se adapta 
                                        a tu estilo de conducción. La programación moderna está creando sistemas que pueden aprender, razonar y realizar 
                                        tareas complejas de manera autónoma.

                                        - Lenguajes como **TensorFlow** y **PyTorch** están diseñados para trabajar con modelos de IA, 
                                        mientras que la computación cuántica abre nuevas posibilidades para resolver problemas que eran 
                                        prácticamente imposibles con la tecnología tradicional.
                                        
                                        **Para expertos:**
                                        
                                        1. **Desarrollo de Paradigmas y Lenguajes Especializados:** La evolución de los paradigmas de 
                                        programación, como la programación funcional, lógica y reactiva, refleja el avance hacia 
                                        enfoques más sofisticados para resolver problemas. Los lenguajes especializados y los entornos de 
                                        desarrollo integrados (IDE) han facilitado la creación de software altamente optimizado y especializado.
                                        
                                        2. **Innovaciones en Herramientas y Metodologías:** La evolución también ha traído innovaciones 
                                        en herramientas y metodologías, como los enfoques ágiles en el desarrollo de software, la integración 
                                        continua y la entrega continua (CI/CD). Estas metodologías permiten a los equipos de desarrollo 
                                        responder rápidamente a los cambios y entregar software de alta calidad de manera eficiente.
                                        
                                        **Conclusión:**
                                        
                                        La evolución de la programación a lo largo de las décadas ha transformado la forma en que 
                                        interactuamos con la tecnología. Desde los primeros días de los lenguajes de bajo nivel 
                                        hasta las avanzadas tecnologías de IA y computación cuántica, la programación ha avanzado de manera 
                                        significativa, reflejando el crecimiento y la sofisticación de la tecnología en general. Al 
                                        igual que un vehículo ha evolucionado desde un simple carruaje a un automóvil de última 
                                        generación, la programación ha progresado para abordar problemas cada vez más complejos 
                                        y mejorar nuestras vidas de maneras que antes eran inimaginables.
                                
                                
                                ")

                                sis.dormir(5)

                            
                            caso 3:
                                escribir ("
                                
                                        **Influencias Modernas en la Programación**
                                        
                                        Las influencias modernas en la programación son como una sinfonía 
                                        de innovaciones y tendencias que han cambiado la forma en que creamos 
                                        y utilizamos el software. Para entender estas influencias, imagina 
                                        la programación como un lienzo en blanco que ha sido transformado 
                                        por una serie de avances tecnológicos y culturales.
                                        
                                        1. **El Impacto de Internet y el Desarrollo Web**
                                        
                                        Internet ha sido una fuerza transformadora en la programación, 
                                        expandiendo el alcance y las posibilidades del software. En la 
                                        era pre-Internet, la programación se centraba en aplicaciones 
                                        de escritorio y sistemas locales. Pero con la llegada de la web, 
                                        el software tuvo que adaptarse a un nuevo entorno: el navegador. 
                                        Esto se asemeja a cómo la invención del automóvil cambió la forma 
                                        en que las personas se desplazaban, requiriendo nuevas carreteras, 
                                        señales de tráfico y reglas.
                                        
                                        Lenguajes como JavaScript, junto con tecnologías como HTML y CSS, 
                                        hicieron posible crear aplicaciones interactivas y dinámicas 
                                        directamente en los navegadores. Los frameworks modernos como React, 
                                        Angular y Vue.js han llevado esta evolución un paso más allá, permitiendo 
                                        a los desarrolladores construir interfaces de usuario ricas y reactivas 
                                        de manera más eficiente.
                                        
                                        2. **La Revolución del Código Abierto y la Colaboración**
                                        
                                        El movimiento del código abierto ha sido otra influencia crucial. Antes, 
                                        el software era en gran parte propietario y cerrado, lo que limitaba la 
                                        colaboración y la innovación. El código abierto es como una biblioteca 
                                        pública de conocimiento, donde el código está disponible para que cualquiera 
                                        lo vea, modifique y mejore.
                                        
                                        Proyectos como Linux y el ecosistema de herramientas relacionadas (como GitHub 
                                        y GitLab) han fomentado una cultura de colaboración global. Esto ha permitido 
                                        a desarrolladores de todo el mundo contribuir a proyectos importantes, similar 
                                        a cómo el crowdsourcing en la investigación científica permite avances más 
                                        rápidos y eficaces.
                                        
                                        3. **La Era de la Computación en la Nube**
                                        
                                        La computación en la nube ha cambiado radicalmente la forma en que las aplicaciones 
                                        se ejecutan y se escalan. Imagina que antes tenías que construir una infraestructura 
                                        completa para cada nuevo proyecto, como montar una fábrica para cada producto. Ahora, 
                                        con la nube, puedes alquilar infraestructura según sea necesario, similar a alquilar 
                                        una sala de conciertos para una actuación en lugar de construir un teatro propio.
                                        
                                        Servicios como Amazon Web Services (AWS), Microsoft Azure y Google Cloud han simplificado 
                                        el despliegue de aplicaciones, permitiendo a los desarrolladores concentrarse en el desarrollo 
                                        de software sin preocuparse por la infraestructura subyacente. Esto ha facilitado la creación 
                                        de aplicaciones escalables y resilientes que pueden adaptarse a la demanda global.
                                        
                                        4. **La Inteligencia Artificial y el Aprendizaje Automático**
                                        
                                        La inteligencia artificial (IA) y el aprendizaje automático (ML) son dos de las 
                                        influencias más recientes y emocionantes. Antes, la programación se centraba en 
                                        crear reglas explícitas para resolver problemas. Ahora, la IA y el ML permiten a 
                                        los sistemas aprender de datos y hacer predicciones basadas en patrones, como 
                                        entrenar a un aprendiz que mejora con la experiencia.
                                        
                                        Herramientas y bibliotecas como TensorFlow, PyTorch y scikit-learn han democratizado 
                                        el acceso a técnicas avanzadas de IA, permitiendo a los desarrolladores crear aplicaciones 
                                        que pueden reconocer imágenes, procesar lenguaje natural y tomar decisiones basadas en datos.
                                        
                                        5. **Metodologías Ágiles y DevOps**
                                        
                                        Finalmente, las metodologías ágiles y DevOps han revolucionado el proceso de desarrollo de 
                                        software. En lugar de seguir un enfoque rígido y secuencial, las metodologías ágiles promueven 
                                        la iteración rápida y la adaptación constante. Es como ajustar una receta a medida que 
                                        cocinas, en lugar de seguir una lista fija de ingredientes sin cambios.
                                        
                                        DevOps, por otro lado, integra el desarrollo y las operaciones, mejorando la colaboración entre 
                                        equipos y acelerando el ciclo de vida del software. Esto es comparable a optimizar una línea 
                                        de producción, donde los diferentes pasos del proceso se coordinan para producir resultados de 
                                        alta calidad de manera más eficiente.
                                        
                                        Cada una de estas influencias ha contribuido a un ecosistema de programación más dinámico, accesible 
                                        y potente, reflejando cómo las innovaciones tecnológicas y culturales continúan moldeando el futuro 
                                        del software.
    
    
                             ")

                             sis.dormir(5)
                            defecto:
                                escribir ("No haz elegido una respuesta válida, vuelve a intentarlo")
                        fin


                        escribir ("
                                                                                                                                   
                          ()========================================================================================================()
                          ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                          ()                                                                                                        ()
                          ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                          ()                                                                                                        ()
                          ()========================================================================================================()
  


                        ")

                        eleMenu = leer()
                        limpiar()

                    caso 3://Fundamentos de la Programación (En Desarrollo)
                        escribir ("
                
                            3. Fundamentos de la Programación
    
                            1. Conceptos Básicos: Variables, Estructuras de Control, Funciones
                            2. Tipos de Datos y Operaciones
                            3. Introducción a la Lógica y Algoritmo
                            4. Manejo de Errores y Depuración
                        
                        
                        
                        
                        ")
                        

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                                escribir ("

                                **Fundamentos de la Programación: Conceptos Básicos**
                                    
                                Para entender la programación, es crucial conocer los 
                                conceptos básicos que forman la base de cualquier lenguaje 
                                de programación. Estos conceptos son como los ladrillos 
                                fundamentales con los que construimos aplicaciones y 
                                programas. Vamos a desglosar tres conceptos 
                                esenciales: variables, estructuras de control y funciones.
                                
                                ### 1. Variables: Los Contenedores de Datos
                                
                                **¿Qué es una variable?**  

                                Imagina que una variable es como una caja etiquetada donde 
                                guardas información. Cada caja tiene un nombre (la etiqueta) 
                                y puede contener diferentes tipos de objetos (datos). En 
                                programación, estas 'cajas' se utilizan para almacenar 
                                datos que puedes usar y manipular en tu código.
                                
                                **Ejemplo en la vida real:**  

                                Supón que tienes una caja etiquetada como 'Edad'. Dentro de 
                                esa caja, puedes poner el número 25, el cual representa la 
                                edad de una persona. Si necesitas cambiar la edad a 26, 
                                simplemente reemplazas el número dentro de la caja.
                                
                                **En código Python:** 

                                En un lenguaje de programación, puedes tener una variable llamada 
                                `edad` que almacena el valor 25. Si en el futuro quieres actualizar 
                                la edad, solo cambias el valor almacenado en la variable.
                                
                                ```python

                                edad = 25  # La variable 'edad' contiene el valor 25
                                edad = 26  # Ahora la variable 'edad' contiene el valor 26

                                ```
                                
                                ### 2. Estructuras de Control: Las Decisiones y Repeticiones
                                
                                **¿Qué son las estructuras de control?** 

                                Las estructuras de control son como las señales de tráfico en una 
                                carretera: guían el flujo del programa dependiendo de ciertas 
                                condiciones. Hay dos tipos principales: condicionales y de repetición.
                                
                                **Condicionales:** 

                                Las estructuras condicionales permiten que el programa tome decisiones 
                                basadas en condiciones. Es como si en una intersección de tráfico, 
                                dependieras de la luz verde para avanzar y de la roja para detenerte.
                                
                                **Ejemplo en la vida real:**  

                                Si el semáforo está en verde, puedes cruzar la calle. Si está en rojo, 
                                debes detenerte. De manera similar, en un programa, puedes usar una 
                                condición `if` para decidir qué acción tomar.
                                
                                **En código Python:**
                                
                                ```python

                                edad = 20
                                if edad >= 18:
                                    print('Eres un adulto.')
                                else:
                                    print('Eres un menor de edad.'')

                                ```
                                
                                **Estructuras de Repetición:** 

                                Las estructuras de repetición permiten ejecutar un bloque de código varias 
                                veces. Es como una máquina expendedora que puede servir múltiples refrescos 
                                hasta que te canses de comprarlos.
                                
                                **Ejemplo en la vida real:**  

                                Imagina que tienes una lista de tareas para hacer y deseas marcar cada 
                                tarea como completada. Usas un bucle para recorrer la lista y marcar 
                                cada tarea.
                                
                                **En código Pyhton:**
                                
                                ```python

                                for i in range(5):
                                    print(f''Contador: {i}'')

                                ```
                                
                                En este ejemplo, el bucle `for` repetirá la acción de imprimir el contador desde 0 hasta 4.
                                
                                ### 3. Funciones: Las Máquinas de Tareas Repetitivas
                                
                                **¿Qué es una función?**

                                Una función es como una máquina en una fábrica: recibe materiales de entrada, realiza 
                                un proceso específico, y luego devuelve un resultado. Las funciones permiten agrupar 
                                y reutilizar código, facilitando la organización y la reducción de errores.
                                
                                **Ejemplo en la vida real:**  

                                Supón que tienes una máquina que hace pasteles. Le das ingredientes (entrada), la 
                                máquina mezcla y hornea (proceso), y te devuelve un pastel (resultado). Puedes usar 
                                esta máquina muchas veces con diferentes ingredientes.
                                
                                **En código Python:**
                                
                                ```python

                                def saludar(nombre):
                                    return f'Hola, {nombre}!
                                
                                mensaje = saludar('Ana')
                                print(mensaje)  # Imprime: Hola, Ana!

                                ```
                                
                                En este ejemplo, la función `saludar` toma un parámetro `nombre`, lo utiliza para crear 
                                un mensaje, y luego devuelve ese mensaje.
                                
                                ### Resumen
                                
                                Estos conceptos básicos son los fundamentos que te permiten construir programas eficientes 
                                y organizados. Las **variables** actúan como contenedores de datos, las **estructuras de 
                                control** dirigen el flujo del programa según condiciones y repeticiones, y las **funciones** 
                                permiten encapsular y reutilizar código de manera ordenada.
                                
                                Con estos conceptos en mente, estarás bien equipado para abordar problemas de programación 
                                y construir aplicaciones que sean tanto funcionales como eficientes.
                                ")

                                sis.dormir(5)

                            caso 2:
                                escribir ("

                                **Fundamentos de la Programación: Tipos de Datos y Operaciones**

                                  Para construir programas útiles, es esencial comprender los tipos 
                                  de datos y cómo se pueden manipular mediante operaciones. Estos 
                                  conceptos son como los materiales básicos y las herramientas en 
                                  un taller: saber cómo usarlos te permite crear casi cualquier cosa.
                                  
                                  ### 1. Tipos de Datos: Los Diferentes Tipos de Materiales
                                  
                                  **¿Qué son los tipos de datos?**

                                  Los tipos de datos definen qué tipo de información puedes almacenar 
                                  y manipular en tu programa. Imagina que estás construyendo un mueble; 
                                  necesitarás diferentes tipos de materiales: madera, tornillos, clavos, 
                                  etc. De manera similar, en programación, tienes diferentes tipos de 
                                  datos para almacenar diferentes tipos de información.
                                  
                                  **Principales tipos de datos:**
                                  
                                  - **Números Enteros (Integer):**  
                                    Representan números sin decimales.

                                    **Analogía:** Imagina que estás contando el número de sillas en una 
                                    sala. El número de sillas (2, 3, 10) no tiene decimales.  

                                    **Ejemplo en código:** `edad = 30`
                                  
                                  - **Números Decimales (Float):**  
                                    Representan números con decimales.

                                    **Analogía:** Supón que estás midiendo la longitud de una 
                                    cuerda con precisión. La cuerda podría medir 3.75 metros. 

                                    **Ejemplo en código:** `precio = 19.99`
                                  
                                  - **Cadenas de Texto (String):**  
                                    Representan secuencias de caracteres, como palabras y frases.

                                    **Analogía:** Piensa en una etiqueta en una caja, que contiene una descripción o nombre.  

                                    **Ejemplo en código:** `nombre = 'Juan'`
                                  
                                  - **Booleanos (Boolean):**  
                                    Representan valores de verdad: verdadero o falso. 

                                    **Analogía:** Es como un interruptor de luz que está en 
                                    “encendido” o “apagado”.

                                    **Ejemplo en código:** `es_adulto = True`
                                  
                                  - **Listas (List) y Tuplas (Tuple):**  
                                    Representan colecciones de elementos. 

                                    **Analogía:** Imagina un estante con diferentes libros (una lista) o un conjunto 
                                    de coordenadas fijas en un mapa (una tupla). 

                                    **Ejemplo en código:**  
                                    - **Lista:** `frutas = ['manzana', 'banana', 'cereza']`  
                                    - **Tupla:** `coordenadas = (40.7128, -74.0060)`
                                  
                                  ### 2. Operaciones: Herramientas para Manipular Datos
                                  
                                  **¿Qué son las operaciones?** 

                                  Las operaciones te permiten manipular y combinar datos, al igual que las herramientas 
                                  te permiten trabajar con materiales en un taller. Aquí veremos algunas operaciones básicas:
                                  
                                  **Operaciones Aritméticas:**  
                                  Realizan cálculos matemáticos con números. 

                                  **Analogía:** Imagina que estás construyendo un mueble y necesitas medir, cortar 
                                  o ensamblar piezas de madera. Las operaciones aritméticas son como estas acciones.

                                  **Ejemplos en código:**
                                  
                                  - **Suma:** `suma = 5 + 3`  # Resultado: 8
                                  - **Resta:** `resta = 10 - 4`  # Resultado: 6
                                  - **Multiplicación:** `producto = 4 * 7`  # Resultado: 28
                                  - **División:** `cociente = 20 / 4`  # Resultado: 5.0
                                  
                                  **Operaciones de Comparación:**  
                                  Comparan dos valores y devuelven un resultado booleano.  

                                  **Analogía:** Es como comparar dos precios en una tienda para ver cuál es más barato. 

                                  **Ejemplos en código:**
                                  
                                  - **Igual a:** `es_igual = (5 == 5)`  # Resultado: True
                                  - **Mayor que:** `es_mayor = (10 > 5)`  # Resultado: True
                                  - **Menor o igual que:** `es_menor_o_igual = (3 <= 4)`  # Resultado: True
                                  
                                  **Operaciones Lógicas:**  
                                  Combina valores booleanos y devuelve un nuevo valor booleano.  

                                  **Analogía:** Es como hacer un chequeo en una lista de requisitos: si todos se 
                                    cumplen, se aprueba el proyecto.  

                                  **Ejemplos en código:**
                                  
                                  - **AND (y):** `y_logico = (True and False)`  # Resultado: False
                                  - **OR (o):** `o_logico = (True or False)`  # Resultado: True
                                  - **NOT (no):** `no_logico = not True`  # Resultado: False
                                  
                                  **Operaciones con Cadenas de Texto:**  
                                  Manipulan y combinan cadenas de caracteres. 

                                  **Analogía:** Es como mezclar ingredientes para hacer una receta.  

                                  **Ejemplos en código:**
                                  
                                  - **Concatenación:** `mensaje = 'Hola, ' + 'Mundo!'  # Resultado: 'Hola, Mundo!'

                                  - **Repetición:** `eco = 'Ha' * 3`  # Resultado: 'HaHaHa'
                                  
                                  ### Resumen
                                  
                                  Entender los tipos de datos y operaciones es fundamental para escribir programas 
                                  efectivos y eficientes. Los **tipos de datos** te permiten almacenar y categorizar 
                                  información, mientras que las **operaciones** te permiten manipular esa información 
                                  para lograr los resultados deseados. Al igual que elegir los materiales y herramientas 
                                  adecuados es esencial para un proyecto de construcción, seleccionar y usar 
                                  correctamente los tipos de datos y operaciones es clave para el éxito en la programación.
                                
                                
                                ")
                                sis.dormir(5)

                            caso 3:
                                escribir ("

                                    **Fundamentos de la Programación: Introducción a la Lógica y Algoritmos**
                                    
                                    En programación, **la lógica** y **los algoritmos** son las herramientas que 
                                    nos permiten resolver problemas de manera eficiente y ordenada. Para entender 
                                    cómo funciona esto, pensemos en cómo abordamos una tarea compleja en la vida 
                                    cotidiana. Aquí exploraremos estos conceptos fundamentales con una analogía 
                                    clara y detallada.
                                    
                                    ### 1. Lógica: El Pensamiento Racional
                                    
                                    **¿Qué es la lógica?**  

                                    La lógica en programación es el proceso de tomar decisiones basadas en condiciones. 
                                    Es como un conjunto de reglas que nos ayudan a decidir qué hacer en diferentes 
                                    situaciones. Imagina que estás jugando un juego de mesa donde tienes que tomar 
                                    decisiones basadas en las cartas que recibes. Cada carta tiene reglas sobre lo que 
                                    puedes hacer a continuación. La lógica en programación funciona de manera similar: 
                                    establece las reglas para que el programa tome decisiones y ejecute acciones.
                                    
                                    **Conceptos Clave:**
                                    
                                    - **Condicionales (If-Else):**  

                                      Permiten al programa tomar decisiones basadas en condiciones específicas.  

                                      **Analogía:** Es como decidir qué ropa ponerte dependiendo del clima. Si hace 
                                      frío, te pones un abrigo; si está soleado, optas por una camiseta.  

                                      **Ejemplo en código:**  

                                      ```python

                                      if temperatura < 15:
                                          vestir('abrigo')
                                      else:
                                          vestir('camiseta')

                                      ```
                                    
                                    - **Bucles (Loops):** 

                                      Permiten repetir acciones hasta que se cumpla una condición. 

                                      **Analogía:** Imagina que estás limpiando una habitación. Sigues limpiando 
                                      hasta que toda la habitación esté limpia.  

                                      **Tipos Comunes:**

                                      - **While Loop:** Repite mientras se cumpla una condición.

                                        **Ejemplo:**

                                        ```python
                                        mientras (sujeto != limpio):
                                            limpiar(sujeto)
                                        ```
                                      - **For Loop:** Itera sobre una colección de elementos.

                                        **Ejemplo:**

                                        ```python
                                        para cada libro en estante:
                                            leer(libro)
                                        ```
                                    
                                    ### 2. Algoritmos: La Receta para Resolver Problemas
                                    
                                    **¿Qué es un algoritmo?**

                                    Un algoritmo es una serie de pasos finitos y bien definidos para 
                                    resolver un problema o realizar una tarea. Es como una receta de 
                                    cocina: sigues una serie de instrucciones para preparar un plato. 
                                    De manera similar, un algoritmo define los pasos necesarios para 
                                    obtener un resultado deseado en un programa.
                                    
                                    **Componentes de un Algoritmo:**
                                    
                                    - **Entrada (Input):** 

                                      Los datos que el algoritmo recibe para procesar.  

                                      **Analogía:** Los ingredientes que necesitas para cocinar un plato.

                                      **Ejemplo:** Ingredientes para una receta de pastel.
                                    
                                    - **Proceso:**  

                                      Los pasos o cálculos que el algoritmo realiza con la entrada.

                                      **Analogía:** La mezcla y el horneado en la cocina. 

                                      **Ejemplo:** Mezclar ingredientes y hornear el pastel.
                                    
                                    - **Salida (Output):** 

                                      El resultado final que el algoritmo produce. 

                                      **Analogía:** El pastel recién horneado.  

                                      **Ejemplo:** Pastel listo para servir.
                                    
                                    **Ejemplo de un Algoritmo Simple:**
                                    
                                    1. **Inicio.**
                                    2. **Leer el número de entrada (n).**
                                    3. **Si n es mayor que 10, entonces**
                                       - **Imprimir 'Número mayor que 10'.**
                                    4. **Sino**
                                       - **Imprimir 'Número menor o igual a 10'.**
                                    5. **Fin.**
                                    
                                    **Ejemplo en Código:**
                                    
                                    ```python

                                    def verificar_numero(n):
                                        if n > 10:
                                            return 'Número mayor que 10'
                                        else:
                                            return 'Número menor o igual a 10'

                                    ```
                                    
                                    ### 3. Analogía Combinada: La Ruta a la Casa
                                    
                                    Imagina que necesitas llegar a casa desde tu trabajo. Tienes 
                                    un mapa con diferentes rutas y señales de tráfico. Aquí 
                                    es cómo la lógica y los algoritmos juegan un papel:
                                    
                                    - **Lógica:** Decides qué ruta tomar basándote en las condiciones 
                                    del tráfico (si hay congestión, si está despejado, etc.). Estas 
                                        decisiones son como las condicionales en programación.
                                      
                                    - **Algoritmo:** Sigues un conjunto de instrucciones para llegar 
                                    a casa (gira a la derecha, sigue recto, etc.). Este proceso es 
                                    comparable a un algoritmo, donde cada paso te acerca más a tu destino.
                                    
                                    ### Resumen
                                    
                                    La **lógica** en programación te ayuda a tomar decisiones y controlar 
                                    el flujo del programa, mientras que los **algoritmos** te proporcionan 
                                    un plan estructurado para resolver problemas y realizar tareas. 
                                    Juntos, forman la base sobre la cual construyes soluciones efectivas 
                                    y eficientes. La lógica es tu guía para decidir qué hacer, y los 
                                    algoritmos son el mapa que sigues para lograr tus objetivos.
                                
                                
                                ")
                                sis.dormir(5)

                            caso 4:
                                escribir ("

                                ### Manejo de Errores y Depuración
                                
                                El **manejo de errores** y la **depuración** son aspectos esenciales 
                                en el desarrollo de software que aseguran que un programa funcione 
                                correctamente y se comporte de la manera esperada. Vamos a desglosar 
                                estos conceptos con analogías claras y explicaciones detalladas para 
                                que sean comprensibles para todos, desde principiantes hasta expertos.
                                
                                #### Manejo de Errores
                                
                                **Manejo de errores** se refiere al proceso de identificar, manejar y 
                                responder a errores que pueden ocurrir durante la ejecución de un programa. 
                                Los errores son situaciones imprevistas que interrumpen el flujo normal del 
                                programa.
                                
                                1. **Tipos de Errores**
                                
                                   - **Errores de Sintaxis**: Son errores que ocurren cuando el código no 
                                   está escrito correctamente y el compilador o intérprete no puede entenderlo. 
                                   Son como errores gramaticales en una carta; sin una gramática correcta, el 
                                   mensaje no se entiende.
                                   
                                   - **Errores de Ejecución**: Son errores que ocurren mientras el programa está 
                                    en funcionamiento, como intentar dividir por cero o acceder a un archivo que 
                                    no existe. Son como intentar usar un electrodoméstico sin enchufarlo; el aparato 
                                    no funcionará porque algo esencial falta.
                                
                                   - **Errores Lógicos**: Son errores en la lógica del programa que hacen que no 
                                   produzca el resultado correcto, aunque el código no tenga errores de sintaxis. 
                                   Es como seguir una receta incorrecta; los ingredientes están bien, pero el plato 
                                   final no sabe como debería.
                                
                                2. **Manejo de Errores en el Código**
                                
                                   - **Excepciones**: La mayoría de los lenguajes de programación modernos utilizan 
                                   excepciones para manejar errores. Las excepciones son como 'señales de advertencia' 
                                   que el programa envía cuando algo sale mal. Puedes 'atrapar' estas señales y manejar 
                                   el error de manera controlada.
                                
                                   - **Bloques Try-Catch**: Estos bloques permiten que el programa intente ejecutar 
                                   un bloque de código (try) y, si ocurre un error, lo captura y lo maneja (catch). 
                                    Es como tener un plan de contingencia para un evento inesperado.
                                
                                   **Ejemplo en Python:**
                                
                                   ```python

                                   try:
                                       resultado = 10 / 0
                                   except ZeroDivisionError:
                                       print('Error: No se puede dividir por cero.')

                                   ```
                                
                                   Aquí, el bloque `try` intenta dividir 10 por 0, lo cual genera un error. El bloque `except` 
                                   captura el error y proporciona un mensaje adecuado.
                                
                                3. **Registro de Errores**
                                
                                   - **Logs**: Los registros o logs son archivos donde se anotan los errores que ocurren en el 
                                   programa. Estos son útiles para analizar problemas que no se detectan durante las pruebas.
                                
                                   **Ejemplo en Python usando logging:**
                                
                                   ```python

                                   import logging
                                
                                   logging.basicConfig(filename='mi_app.log', level=logging.ERROR)
                                
                                   try:
                                       resultado = 10 / 0
                                   except ZeroDivisionError:
                                       logging.error('Error: No se puede dividir por cero.')

                                   ```
                                
                                   Aquí, el error se registra en un archivo de log, facilitando su revisión posterior.
                                
                                #### Depuración
                                
                                **Depuración** es el proceso de identificar y corregir errores en el código. 
                                Es como un detective investigando un caso para encontrar y resolver problemas.
                                
                                1. **Herramientas de Depuración**
                                
                                   - **Depuradores (Debuggers)**: Son herramientas que permiten pausar la 
                                   ejecución del programa, examinar el estado de las variables y seguir el 
                                   flujo de ejecución paso a paso. Es como detener una película para analizar 
                                   cada escena con detenimiento.
                                
                                   **Ejemplo con una herramienta de depuración:**
                                
                                   Imagina que tienes un código con un error, y usas el depurador para detener 
                                   la ejecución justo antes del error para examinar el valor de las variables 
                                   y entender por qué ocurre el problema.
                                
                                2. **Técnicas de Depuración**
                                
                                   - **Impresión de Variables**: A menudo, agregar `print` o `console.log` en 
                                   diferentes partes del código ayuda a ver qué valores tienen las variables 
                                   en distintos momentos. Es como usar una lupa para examinar objetos en busca 
                                   de pistas.
                                
                                   - **Análisis de Stack Trace**: Un stack trace proporciona una lista de las 
                                   llamadas a funciones en el momento en que ocurrió un error. Es como leer 
                                   las notas de un investigador para entender qué pasos se dieron antes de 
                                   un problema.
                                
                                   **Ejemplo de stack trace:**
                                
                                   Si un error ocurre en una función llamada `calcular()`, el stack trace mostrará 
                                   la cadena de llamadas de funciones que llevaron al error, ayudando a identificar 
                                   dónde se originó el problema.
                                
                                3. **Pruebas Unitarias**
                                
                                   - **Pruebas Unitarias**: Son pruebas automáticas que se escriben para verificar 
                                   que las distintas partes del programa funcionen correctamente. Es como tener 
                                   un checklist para asegurarse de que todos los aspectos del programa están en orden.
                                
                                   **Ejemplo en Python con unittest:**
                                
                                   ```python

                                   import unittest
                                
                                   def suma(a, b):
                                       return a + b
                                
                                   class TestSuma(unittest.TestCase):
                                       def test_suma(self):
                                           self.assertEqual(suma(2, 3), 5)
                                           self.assertEqual(suma(-1, 1), 0)
                                
                                   if __name__ == '__main__':
                                       unittest.main()

                                   ```
                                
                                   Aquí, `unittest` verifica que la función `suma` produzca 
                                   los resultados correctos para diferentes entradas.
                                
                                #### Resumen
                                
                                El manejo de errores y la depuración son prácticas cruciales 
                                en el desarrollo de software. **Manejar errores** correctamente 
                                asegura que el programa pueda enfrentar situaciones imprevistas 
                                sin fallar abruptamente, mientras que la **depuración** permite 
                                identificar y corregir problemas en el código. Juntas, estas 
                                prácticas aseguran que el software sea robusto, confiable 
                                y fácil de mantener.
                                
                                ")
                            defecto:
                                escribir ("No haz elegido una opción válida")
                        fin
                        

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      

                    caso 4://Lenguajes de Programación (En Desarrollo)
                            escribir ("
                            
                                4. Lenguajes de Programación
        
                                °¬ Lenguajes Imperativos: C, Pascal
                                °¬ Lenguajes Orientados a Objetos: Java, C++
                                °¬ Lenguajes Funcionales: Haskell, Lisp
                                °¬ Lenguajes de Scripting: Python, JavaScript
                                °¬ Lenguajes de Programación Modernos: Rust, Go, Swift
                                °¬ Comparación entre Lenguajes de Programación
        
                            
                            ")
                            /*

                            eleP = leer()
                            limpiar()
    
                            elegir (eleP)
                                caso 1:
                                caso 2:
                                caso 3:
                                defecto :
                            fin
                            */
    
                            escribir ("
                                                                                                                                       
                             ()========================================================================================================()
                             ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                             ()                                                                                                        ()
                             ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                             ()                                                                                                        ()
                             ()========================================================================================================()
    
    
    
                          ")
                          eleMenu = leer()
                          limpiar()

                          
                    caso 5://Paradigmas de Programación (En Desarrollo)
                        escribir ("
                
                            5. Paradigmas de Programación
    
                            °¬ Programación Imperativa
                            °¬ Programación Funcional
                            °¬ Programación Orientada a Objetos
                            °¬ Programación Lógica
                            °¬ Metodologías de Programación: Ágil, TDD, DevOps
                        
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 6://Desarrollo de Software (En Desarrollo)

                        escribir ("
                        
                                                        6. Desarrollo de Software
            
                                    °¬ Ciclo de Vida del Desarrollo de Software
                                    °¬ Ingeniería de Requisitos
                                    °¬ Diseño de Software
                                    °¬ Implementación y Mantenimiento
                                    °¬ Control de Versiones (Git, SVN)
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 7://Estructuras de Datos y Algoritmos (En Desarrollo)
                        escribir ("
                        
                                                        7. Estructuras de Datos y Algoritmos
            
                                    °¬ Estructuras de Datos Básicas: Listas, Pilas, Colas
                                    °¬ Estructuras de Datos Avanzadas: Árboles, Grafos, Tablas Hash
                                    °¬ Algoritmos de Búsqueda y Ordenación
                                    °¬ Complejidad Algorítmica y Análisis de Eficiencia
                        
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 8://Bases de Datos (En Desarrollo)
                        escribir ("
                        

                            8. Bases de Datos
                
                            °¬ Conceptos Básicos de Bases de Datos
                            °¬ SQL y Bases de Datos Relacionales
                            °¬ SQL y Bases de Datos No Relacionales
                            °¬ Diseño y Normalización de Bases de Datos
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")

                      eleMenu = leer()
                      limpiar()
                      */
                    caso 9://Desarrollo Web (En Desarrollo)
                        escribir ("
                            
                        
                                9. Desarrollo Web
            
                                    °¬ Fundamentos del Desarrollo Web
                                    °¬ Frontend: HTML, CSS, JavaScript
                                    °¬ Backend: Node.js, Python, PHP
                                    °¬ Frameworks Web: React, Angular, Django
                                    °¬ APIs y Servicios Web
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 10://Seguridad en Programación (En Desarrollo)
                        escribir ("
                        
                           10. Seguridad en Programación
            
                                    °¬ Principios de Seguridad en el Desarrollo de Software
                                    °¬ Criptografía y Cifrado
                                    °¬ Gestión de Vulnerabilidades y Parcheo
                                    °¬ Auditorías de Código y Pentesting
            
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 11://Lenguaje de Programación Latino (En Desarrollo)
                        escribir ("
                        

                          11. Lenguaje de Programación Latino
              
                          °¬ Introducción al Lenguaje de Programación Latino
                          °¬ Sintaxis y Características
                          °¬ Ejemplos y Casos de Uso
                          °¬ Comparación con Otros Lenguajes
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 12://Lenguaje de Programación C (En Desarrollo)
                        escribir ("
                        

                          12. Lenguaje de Programación C
              
                          °¬ Introducción al Lenguaje de Programación C
                          °¬ Sintaxis y Características
                          °¬ Ejemplos y Casos de Uso
                          °¬ Comparación con Otros Lenguajes
                        
                        ")

                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 13://Tópicos avanzados en programación (En Desarrollo)
                        escribir ("
                        

                         
                                13. Tópicos Avanzados en Programación
            
                                    °¬ Programación Concurrente y Multihilo
                                    °¬ Inteligencia Artificial y Machine Learning
                                    °¬ Computación Cuántica
                                    °¬ Programación en la Nube y DevOps
                                    °¬ Desarrollo de Videojuegos
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 14://Recursos y herramientas de programación (En Desarrollo)
                        escribir ("
                            

                            
                                14. Recursos y Herramientas de Programación
            
                                    °¬ Entornos de Desarrollo Integrado (IDE)
                                    °¬ Herramientas de Control de Versiones
                                    °¬ Plataformas de Desarrollo Colaborativo
                                    °¬ Bibliotecas y Frameworks Populares

                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      eleMenu = leer()
                      limpiar()
                      */
                    caso 15://Proyectos y Ejercicios Prácticos (En Desarrollo)
                        escribir ("
                                

                                
                                15. Proyectos y Ejercicios Prácticos
            
                                    °¬ Proyectos de Programación para Principiantes
                                    °¬ Retos de Programación Intermedios
                                    °¬ Ejercicios de Algoritmos y Estructuras de Datos
                                    °¬ Participación en Hackathons y Competencias de Programación
                        
                        ")
                        /*

                        eleP = leer()
                        limpiar()

                        elegir (eleP)
                            caso 1:
                            caso 2:
                            caso 3:
                            defecto:
                        fin

                        escribir ("
                                                                                                                                   
                         ()========================================================================================================()
                         ()    * Para volver al menú de Programación, Introduce cualquier número o letra, y presiona 'Enter'.      ()
                         ()                                                                                                        ()
                         ()    * Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                         ()
                         ()                                                                                                        ()
                         ()========================================================================================================()



                      ")
                      */
                      eleMenu = leer()
                      limpiar()
                    defecto:
                        escribir ("
                                                                                                                                                                                                                                                 
                                                                                                                                     
                              Por favor "..Nombre..", elige la opción que quieras hacer:                                                                                       
                                                                                                                               
                             ()========================================================================================================()                               
                             ()                                                                                                        ()                       
                             () *Introduce cualquier número o letra, y presiona enter para volver al menú de Programación.             ()     
                             ()                                                                                                        ()   
                             () *Presiona 0 y presiona la tecla 'Enter' para ver màs opciones disponibles.                             ()          
                             ()                                                                                                        ()                        
                             ()========================================================================================================()
                                                                                                                                   
                                                                                                                                   
                                                                                                                                                               
                        ")

                        eleMate = leer()
                        limpiar()

                fin




            fin



        caso 19://Módulo de Administración
            escribir ("Haz elegido Administración")
            escribir ("¿qué rama de la Administración te gustaría estudiar?")
        caso 20://Módulo de Inglés
            escribir ("Haz elegido Inglés")
            escribir ("¿qué rama del Inglés te gustaría estudiar?")
        caso 21://Módulo de Historia
            escribir ("Haz elegido Historia")
            escribir ("¿qué rama de la Historia te gustaría estudiar?")
        caso 22://Módulo de Lingúística
            escribir ("Haz elegido Lingüística")
            escribir ("¿qué rama de la Lingüística te gustaría estudiar?")
        defecto://Mensaje de no se eligió ninguna materia
            escribir ("
                
                ()===================================()
                ||                                   ||                      
                ||                                   ||                      
                ||  No haz elegido ninguna materia   ||                                                    
                ||                                   ||                      
                ||                                   ||                      
                ()===================================()                                                                   


            ")
    fin


    // menú de selección antes de cerrar el programa 
    escribir ("
    
                "..Nombre)

    escribir ("
     
        ()==================================================================================================================()
        ||                                                                                                                  ||
        ||     * Para volver a ver el menu, introduce cualquier número o letra, y despúes presiona la tecla 'Enter'.        ||
        ||                                                                                                                  ||
        ||     * Para cerrar el programa introduce 0 y presiona la tecla 'Enter', o simplemente presiona la tecla 'Enter'.  ||
        ||                                                                                                                  ||
        ()==================================================================================================================()

    ")

    x = leer()
    limpiar()


fin

# 8-Mensaje de fin del programa
si (x == 0) || (beta == 0) || (eleMenu == 0)

    escribir ("
       
        ██████╗ ██████╗  █████╗  ██████╗██╗ █████╗ ███████╗    ██████╗  ██████╗ ██████╗  
       ██╔════╝ ██╔══██╗██╔══██╗██╔════╝██║██╔══██╗██╔════╝    ██╔══██╗██╔═══██╗██╔══██╗ 
       ██║  ███╗██████╔╝███████║██║     ██║███████║███████╗    ██████╔╝██║   ██║██████╔╝ 
       ██║   ██║██╔══██╗██╔══██║██║     ██║██╔══██║╚════██║    ██╔═══╝ ██║   ██║██╔══██╗ 
       ╚██████╔╝██║  ██║██║  ██║╚██████╗██║██║  ██║███████║    ██║     ╚██████╔╝██║  ██║ 
        ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝╚═╝  ╚═╝╚══════╝    ╚═╝      ╚═════╝ ╚═╝  ╚═╝ 
        
        
       ██╗   ██╗████████╗██╗██╗     ██╗███████╗ █████╗ ██████╗     ███████╗███████╗████████╗███████╗    
       ██║   ██║╚══██╔══╝██║██║     ██║╚══███╔╝██╔══██╗██╔══██╗    ██╔════╝██╔════╝╚══██╔══╝██╔════╝    
       ██║   ██║   ██║   ██║██║     ██║  ███╔╝ ███████║██████╔╝    █████╗  ███████╗   ██║   █████╗      
       ██║   ██║   ██║   ██║██║     ██║ ███╔╝  ██╔══██║██╔══██╗    ██╔══╝  ╚════██║   ██║   ██╔══╝      
       ╚██████╔╝   ██║   ██║███████╗██║███████╗██║  ██║██║  ██║    ███████╗███████║   ██║   ███████╗    
        ╚═════╝    ╚═╝   ╚═╝╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝    ╚══════╝╚══════╝   ╚═╝   ╚══════╝
        
        
       ██████╗ ██████╗  ██████╗  ██████╗ ██████╗  █████╗ ███╗   ███╗ █████╗       ██╗   ██╗██╗   ██╗███████╗██╗    ██╗   ██╗███████╗    
       ██╔══██╗██╔══██╗██╔═══██╗██╔════╝ ██╔══██╗██╔══██╗████╗ ████║██╔══██╗ ██╗  ██║   ██║██║   ██║██╔════╝██║    ██║   ██║██╔════╝    
       ██████╔╝██████╔╝██║   ██║██║  ███╗██████╔╝███████║██╔████╔██║███████║ ╚═╝  ██║   ██║██║   ██║█████╗  ██║    ██║   ██║█████╗      
       ██╔═══╝ ██╔══██╗██║   ██║██║   ██║██╔══██╗██╔══██║██║╚██╔╝██║██╔══██║ ██╗  ╚██╗ ██╔╝██║   ██║██╔══╝  ██║    ╚██╗ ██╔╝██╔══╝      
       ██║     ██║  ██║╚██████╔╝╚██████╔╝██║  ██║██║  ██║██║ ╚═╝ ██║██║  ██║ ╚═╝   ╚████╔╝ ╚██████╔╝███████╗███████╗╚████╔╝ ███████╗    
       ╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝        ╚═══╝   ╚═════╝ ╚══════╝╚══════╝ ╚═══╝  ╚══════╝    
       
       
       ██████╗ ██████╗  ██████╗ ███╗   ██╗████████╗ ██████╗        
       ██╔══██╗██╔══██╗██╔═══██╗████╗  ██║╚══██╔══╝██╔═══██╗██╗    
       ██████╔╝██████╔╝██║   ██║██╔██╗ ██║   ██║   ██║   ██║╚═╝    
       ██╔═══╝ ██╔══██╗██║   ██║██║╚██╗██║   ██║   ██║   ██║██╗    
       ██║     ██║  ██║╚██████╔╝██║ ╚████║   ██║   ╚██████╔╝╚═╝    
       ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝    ╚═════╝        
       
       
       ██╗      █████╗      █████╗  ██████╗ █████╗ ██████╗ ███████╗███╗   ███╗██╗ █████╗     ██╗   ██╗██████╗ ██╗   ██╗███╗   ██╗████████╗██╗   ██╗    
       ██║     ██╔══██╗    ██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝████╗ ████║██║██╔══██╗    ██║   ██║██╔══██╗██║   ██║████╗  ██║╚══██╔══╝██║   ██║    
       ██║     ███████║    ███████║██║     ███████║██║  ██║█████╗  ██╔████╔██║██║███████║    ██║   ██║██████╔╝██║   ██║██╔██╗ ██║   ██║   ██║   ██║    
       ██║     ██╔══██║    ██╔══██║██║     ██╔══██║██║  ██║██╔══╝  ██║╚██╔╝██║██║██╔══██║    ██║   ██║██╔══██╗██║   ██║██║╚██╗██║   ██║   ██║   ██║    
       ███████╗██║  ██║    ██║  ██║╚██████╗██║  ██║██████╔╝███████╗██║ ╚═╝ ██║██║██║  ██║    ╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║   ██║   ╚██████╔╝    
       ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝    ╚═════╝     
       
       
       ███████╗██╗███████╗███╗   ███╗██████╗ ██████╗ ███████╗    ███████╗███████╗████████╗ █████╗ ██████╗  █████╗          █████╗  ██████╗ ██╗   ██╗██╗    
       ██╔════╝██║██╔════╝████╗ ████║██╔══██╗██╔══██╗██╔════╝    ██╔════╝██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗        ██╔══██╗██╔═══██╗██║   ██║██║    
       ███████╗██║█████╗  ██╔████╔██║██████╔╝██████╔╝█████╗      █████╗  ███████╗   ██║   ███████║██████╔╝███████║        ███████║██║   ██║██║   ██║██║    
       ╚════██║██║██╔══╝  ██║╚██╔╝██║██╔═══╝ ██╔══██╗██╔══╝      ██╔══╝  ╚════██║   ██║   ██╔══██║██╔══██╗██╔══██║        ██╔══██║██║▄▄ ██║██║   ██║██║    
       ███████║██║███████╗██║ ╚═╝ ██║██║     ██║  ██║███████╗    ███████╗███████║   ██║   ██║  ██║██║  ██║██║  ██║        ██║  ██║╚██████╔╝╚██████╔╝██║    
       ╚══════╝╚═╝╚══════╝╚═╝     ╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝    ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝        ╚═╝  ╚═╝ ╚══▀▀═╝  ╚═════╝ ╚═╝    
       
       
       ██████╗  █████╗ ██████╗  █████╗      █████╗ ██╗   ██╗██╗   ██╗██████╗  █████╗ ██████╗ ████████╗███████╗       ██╗ 
       ██╔══██╗██╔══██╗██╔══██╗██╔══██╗    ██╔══██╗╚██╗ ██╔╝██║   ██║██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██╔════╝    ██╗╚██╗
       ██████╔╝███████║██████╔╝███████║    ███████║ ╚████╔╝ ██║   ██║██║  ██║███████║██████╔╝   ██║   █████╗      ╚═╝ ██║
       ██╔═══╝ ██╔══██║██╔══██╗██╔══██║    ██╔══██║  ╚██╔╝  ██║   ██║██║  ██║██╔══██║██╔══██╗   ██║   ██╔══╝      ██╗ ██║
       ██║     ██║  ██║██║  ██║██║  ██║    ██║  ██║   ██║   ╚██████╔╝██████╔╝██║  ██║██║  ██║   ██║   ███████╗    ╚═╝██╔╝
       ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝    ╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝ 
       
       




 ")

    sis.dormir(10)
    limpiar()
    
fin